// ignore_for_file: always_specify_types, unused_element, unused_field
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings to speech-dispatcher
class Speechd {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  Speechd(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  Speechd.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdin =
      _lookup<ffi.Pointer<FILE>>('stdin');

  ffi.Pointer<FILE> get stdin => _stdin.value;

  set stdin(ffi.Pointer<FILE> value) => _stdin.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stdout =
      _lookup<ffi.Pointer<FILE>>('stdout');

  ffi.Pointer<FILE> get stdout => _stdout.value;

  set stdout(ffi.Pointer<FILE> value) => _stdout.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> _stderr =
      _lookup<ffi.Pointer<FILE>>('stderr');

  ffi.Pointer<FILE> get stderr => _stderr.value;

  set stderr(ffi.Pointer<FILE> value) => _stderr.value = value;

  int remove(
    ffi.Pointer<ffi.Char> __filename,
  ) {
    return _remove(
      __filename,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> __old,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int renameat(
    int __oldfd,
    ffi.Pointer<ffi.Char> __old,
    int __newfd,
    ffi.Pointer<ffi.Char> __new,
  ) {
    return _renameat(
      __oldfd,
      __old,
      __newfd,
      __new,
    );
  }

  late final _renameatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>>('renameat');
  late final _renameat = _renameatPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int fclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fclose(
      __stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tmpnam_r(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _tmpnam_r(
      __s,
    );
  }

  late final _tmpnam_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam_r');
  late final _tmpnam_r = _tmpnam_rPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> __dir,
    ffi.Pointer<ffi.Char> __pfx,
  ) {
    return _tempnam(
      __dir,
      __pfx,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fflush(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush(
      __stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fflush_unlocked(
      __stream,
    );
  }

  late final _fflush_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush_unlocked');
  late final _fflush_unlocked =
      _fflush_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fopen(
      __filename,
      __modes,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> __filename,
    ffi.Pointer<ffi.Char> __modes,
    ffi.Pointer<FILE> __stream,
  ) {
    return _freopen(
      __filename,
      __modes,
      __stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> fdopen(
    int __fd,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fdopen(
      __fd,
      __modes,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> fopencookie(
    ffi.Pointer<ffi.Void> __magic_cookie,
    ffi.Pointer<ffi.Char> __modes,
    cookie_io_functions_t __io_funcs,
  ) {
    return _fopencookie(
      __magic_cookie,
      __modes,
      __io_funcs,
    );
  }

  late final _fopencookiePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, cookie_io_functions_t)>>('fopencookie');
  late final _fopencookie = _fopencookiePtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Char>,
          cookie_io_functions_t)>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __s,
    int __len,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _fmemopen(
      __s,
      __len,
      __modes,
    );
  }

  late final _fmemopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('fmemopen');
  late final _fmemopen = _fmemopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __bufloc,
    ffi.Pointer<ffi.Size> __sizeloc,
  ) {
    return _open_memstream(
      __bufloc,
      __sizeloc,
    );
  }

  late final _open_memstreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>)>>('open_memstream');
  late final _open_memstream = _open_memstreamPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>();

  void setbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _setbuf(
      __stream,
      __buf,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int setvbuf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __modes,
    int __n,
  ) {
    return _setvbuf(
      __stream,
      __buf,
      __modes,
      __n,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  void setbuffer(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __buf,
    int __size,
  ) {
    return _setbuffer(
      __stream,
      __buf,
      __size,
    );
  }

  late final _setbufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('setbuffer');
  late final _setbuffer = _setbufferPtr.asFunction<
      void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int)>();

  void setlinebuf(
    ffi.Pointer<FILE> __stream,
  ) {
    return _setlinebuf(
      __stream,
    );
  }

  late final _setlinebufPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'setlinebuf');
  late final _setlinebuf =
      _setlinebufPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fprintf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fprintf(
      __stream,
      __format,
    );
  }

  late final _fprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fprintf');
  late final _fprintf = _fprintfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int printf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _printf(
      __format,
    );
  }

  late final _printfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'printf');
  late final _printf =
      _printfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sprintf(
      __s,
      __format,
    );
  }

  late final _sprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sprintf');
  late final _sprintf = _sprintfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfprintf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfprintf');
  late final _vfprintf = _vfprintfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vprintf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vprintf(
      __format,
      __arg,
    );
  }

  late final _vprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vprintf');
  late final _vprintf = _vprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsprintf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsprintf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsprintf');
  late final _vsprintf = _vsprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int snprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _snprintf(
      __s,
      __maxlen,
      __format,
    );
  }

  late final _snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('snprintf');
  late final _snprintf = _snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int vsnprintf(
    ffi.Pointer<ffi.Char> __s,
    int __maxlen,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsnprintf(
      __s,
      __maxlen,
      __format,
      __arg,
    );
  }

  late final _vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vsnprintf');
  late final _vsnprintf = _vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __f,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vasprintf(
      __ptr,
      __f,
      __arg,
    );
  }

  late final _vasprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vasprintf');
  late final _vasprintf = _vasprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int __asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return ___asprintf(
      __ptr,
      __fmt,
    );
  }

  late final ___asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('__asprintf');
  late final ___asprintf = ___asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __ptr,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _asprintf(
      __ptr,
      __fmt,
    );
  }

  late final _asprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('asprintf');
  late final _asprintf = _asprintfPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int vdprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vdprintf(
      __fd,
      __fmt,
      __arg,
    );
  }

  late final _vdprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vdprintf');
  late final _vdprintf = _vdprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int dprintf(
    int __fd,
    ffi.Pointer<ffi.Char> __fmt,
  ) {
    return _dprintf(
      __fd,
      __fmt,
    );
  }

  late final _dprintfPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>(
      'dprintf');
  late final _dprintf =
      _dprintfPtr.asFunction<int Function(int, ffi.Pointer<ffi.Char>)>();

  int fscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _fscanf(
      __stream,
      __format,
    );
  }

  late final _fscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('fscanf');
  late final _fscanf = _fscanfPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int scanf(
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _scanf(
      __format,
    );
  }

  late final _scanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'scanf');
  late final _scanf =
      _scanfPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int sscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
  ) {
    return _sscanf(
      __s,
      __format,
    );
  }

  late final _sscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('sscanf');
  late final _sscanf = _sscanfPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int vfscanf(
    ffi.Pointer<FILE> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vfscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vfscanf');
  late final _vfscanf = _vfscanfPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int vscanf(
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vscanf(
      __format,
      __arg,
    );
  }

  late final _vscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>('vscanf');
  late final _vscanf = _vscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int vsscanf(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<__va_list_tag> __arg,
  ) {
    return _vsscanf(
      __s,
      __format,
      __arg,
    );
  }

  late final _vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('vsscanf');
  late final _vsscanf = _vsscanfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int fgetc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc(
      __stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc(
      __stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int getc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getc_unlocked(
      __stream,
    );
  }

  late final _getc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'getc_unlocked');
  late final _getc_unlocked =
      _getc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar_unlocked');
  late final _getchar_unlocked =
      _getchar_unlockedPtr.asFunction<int Function()>();

  int fgetc_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgetc_unlocked(
      __stream,
    );
  }

  late final _fgetc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fgetc_unlocked');
  late final _fgetc_unlocked =
      _fgetc_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fputc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc(
      __c,
      __stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc(
      __c,
      __stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int __c,
  ) {
    return _putchar(
      __c,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int fputc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputc_unlocked(
      __c,
      __stream,
    );
  }

  late final _fputc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc_unlocked');
  late final _fputc_unlocked =
      _fputc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putc_unlocked(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putc_unlocked(
      __c,
      __stream,
    );
  }

  late final _putc_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc_unlocked');
  late final _putc_unlocked =
      _putc_unlockedPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar_unlocked(
    int __c,
  ) {
    return _putchar_unlocked(
      __c,
    );
  }

  late final _putchar_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'putchar_unlocked');
  late final _putchar_unlocked =
      _putchar_unlockedPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> __stream,
  ) {
    return _getw(
      __stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int __w,
    ffi.Pointer<FILE> __stream,
  ) {
    return _putw(
      __w,
      __stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> __s,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fgets(
      __s,
      __n,
      __stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int __getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return ___getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final ___getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>>('__getdelim');
  late final ___getdelim = ___getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __lineptr,
      __n,
      __delimiter,
      __stream,
    );
  }

  late final _getdelimPtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Int, ffi.Pointer<FILE>)>>('getdelim');
  late final _getdelim = _getdelimPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          int, ffi.Pointer<FILE>)>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Char>> __lineptr,
    ffi.Pointer<ffi.Size> __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __lineptr,
      __n,
      __stream,
    );
  }

  late final _getlinePtr = _lookup<
      ffi.NativeFunction<
          __ssize_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<FILE>)>>('getline');
  late final _getline = _getlinePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<FILE>)>();

  int fputs(
    ffi.Pointer<ffi.Char> __s,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fputs(
      __s,
      __stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int puts(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _puts(
      __s,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int __c,
    ffi.Pointer<FILE> __stream,
  ) {
    return _ungetc(
      __c,
      __stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __s,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __n,
      __s,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fread_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fread_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_unlocked');
  late final _fread_unlocked = _fread_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fwrite_unlocked(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __n,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite_unlocked(
      __ptr,
      __size,
      __n,
      __stream,
    );
  }

  late final _fwrite_unlockedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fwrite_unlocked');
  late final _fwrite_unlocked = _fwrite_unlockedPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int fseek(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseek(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftell(
      __stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void rewind(
    ffi.Pointer<FILE> __stream,
  ) {
    return _rewind(
      __stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __off,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __off,
      __whence,
    );
  }

  late final _fseekoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>>('fseeko');
  late final _fseeko =
      _fseekoPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftelloPtr =
      _lookup<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>(
          'ftello');
  late final _ftello = _ftelloPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fgetpos(
      __stream,
      __pos,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fsetpos(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<fpos_t> __pos,
  ) {
    return _fsetpos(
      __stream,
      __pos,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  void clearerr(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr(
      __stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof(
      __stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror(
      __stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void clearerr_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _clearerr_unlocked(
      __stream,
    );
  }

  late final _clearerr_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr_unlocked');
  late final _clearerr_unlocked =
      _clearerr_unlockedPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int feof_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _feof_unlocked(
      __stream,
    );
  }

  late final _feof_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'feof_unlocked');
  late final _feof_unlocked =
      _feof_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ferror_unlocked(
      __stream,
    );
  }

  late final _ferror_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror_unlocked');
  late final _ferror_unlocked =
      _ferror_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _perror(
      __s,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int fileno(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno(
      __stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno = _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fileno_unlocked(
    ffi.Pointer<FILE> __stream,
  ) {
    return _fileno_unlocked(
      __stream,
    );
  }

  late final _fileno_unlockedPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno_unlocked');
  late final _fileno_unlocked =
      _fileno_unlockedPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int pclose(
    ffi.Pointer<FILE> __stream,
  ) {
    return _pclose(
      __stream,
    );
  }

  late final _pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'pclose');
  late final _pclose = _pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Char> __command,
    ffi.Pointer<ffi.Char> __modes,
  ) {
    return _popen(
      __command,
      __modes,
    );
  }

  late final _popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('popen');
  late final _popen = _popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctermid(
    ffi.Pointer<ffi.Char> __s,
  ) {
    return _ctermid(
      __s,
    );
  }

  late final _ctermidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('ctermid');
  late final _ctermid = _ctermidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  void flockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _flockfile(
      __stream,
    );
  }

  late final _flockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'flockfile');
  late final _flockfile =
      _flockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int ftrylockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftrylockfile(
      __stream,
    );
  }

  late final _ftrylockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ftrylockfile');
  late final _ftrylockfile =
      _ftrylockfilePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void funlockfile(
    ffi.Pointer<FILE> __stream,
  ) {
    return _funlockfile(
      __stream,
    );
  }

  late final _funlockfilePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'funlockfile');
  late final _funlockfile =
      _funlockfilePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int __uflow(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___uflow(
      arg0,
    );
  }

  late final ___uflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '__uflow');
  late final ___uflow =
      ___uflowPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int __overflow(
    ffi.Pointer<FILE> arg0,
    int arg1,
  ) {
    return ___overflow(
      arg0,
      arg1,
    );
  }

  late final ___overflowPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>(
          '__overflow');
  late final ___overflow =
      ___overflowPtr.asFunction<int Function(ffi.Pointer<FILE>, int)>();

  int __sched_cpucount(
    int __setsize,
    ffi.Pointer<cpu_set_t> __setp,
  ) {
    return ___sched_cpucount(
      __setsize,
      __setp,
    );
  }

  late final ___sched_cpucountPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>>(
      '__sched_cpucount');
  late final ___sched_cpucount = ___sched_cpucountPtr
      .asFunction<int Function(int, ffi.Pointer<cpu_set_t>)>();

  ffi.Pointer<cpu_set_t> __sched_cpualloc(
    int __count,
  ) {
    return ___sched_cpualloc(
      __count,
    );
  }

  late final ___sched_cpuallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Size)>>(
          '__sched_cpualloc');
  late final ___sched_cpualloc =
      ___sched_cpuallocPtr.asFunction<ffi.Pointer<cpu_set_t> Function(int)>();

  void __sched_cpufree(
    ffi.Pointer<cpu_set_t> __set,
  ) {
    return ___sched_cpufree(
      __set,
    );
  }

  late final ___sched_cpufreePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>(
          '__sched_cpufree');
  late final ___sched_cpufree =
      ___sched_cpufreePtr.asFunction<void Function(ffi.Pointer<cpu_set_t>)>();

  int sched_setparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setparam(
      __pid,
      __param,
    );
  }

  late final _sched_setparamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>(
      'sched_setparam');
  late final _sched_setparam = _sched_setparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_getparam(
    int __pid,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_getparam(
      __pid,
      __param,
    );
  }

  late final _sched_getparamPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>(
      'sched_getparam');
  late final _sched_getparam = _sched_getparamPtr
      .asFunction<int Function(int, ffi.Pointer<sched_param>)>();

  int sched_setscheduler(
    int __pid,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _sched_setscheduler(
      __pid,
      __policy,
      __param,
    );
  }

  late final _sched_setschedulerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(__pid_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('sched_setscheduler');
  late final _sched_setscheduler = _sched_setschedulerPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int sched_getscheduler(
    int __pid,
  ) {
    return _sched_getscheduler(
      __pid,
    );
  }

  late final _sched_getschedulerPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(__pid_t)>>(
          'sched_getscheduler');
  late final _sched_getscheduler =
      _sched_getschedulerPtr.asFunction<int Function(int)>();

  int sched_yield() {
    return _sched_yield();
  }

  late final _sched_yieldPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('sched_yield');
  late final _sched_yield = _sched_yieldPtr.asFunction<int Function()>();

  int sched_get_priority_max(
    int __algorithm,
  ) {
    return _sched_get_priority_max(
      __algorithm,
    );
  }

  late final _sched_get_priority_maxPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_max');
  late final _sched_get_priority_max =
      _sched_get_priority_maxPtr.asFunction<int Function(int)>();

  int sched_get_priority_min(
    int __algorithm,
  ) {
    return _sched_get_priority_min(
      __algorithm,
    );
  }

  late final _sched_get_priority_minPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'sched_get_priority_min');
  late final _sched_get_priority_min =
      _sched_get_priority_minPtr.asFunction<int Function(int)>();

  int sched_rr_get_interval(
    int __pid,
    ffi.Pointer<timespec> __t,
  ) {
    return _sched_rr_get_interval(
      __pid,
      __t,
    );
  }

  late final _sched_rr_get_intervalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>>(
      'sched_rr_get_interval');
  late final _sched_rr_get_interval = _sched_rr_get_intervalPtr
      .asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  int time(
    ffi.Pointer<time_t> __timer,
  ) {
    return _time(
      __timer,
    );
  }

  late final _timePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>('time');
  late final _time = _timePtr.asFunction<int Function(ffi.Pointer<time_t>)>();

  double difftime(
    int __time1,
    int __time0,
  ) {
    return _difftime(
      __time1,
      __time0,
    );
  }

  late final _difftimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>(
          'difftime');
  late final _difftime = _difftimePtr.asFunction<double Function(int, int)>();

  int mktime(
    ffi.Pointer<tm> __tp,
  ) {
    return _mktime(
      __tp,
    );
  }

  late final _mktimePtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('mktime');
  late final _mktime = _mktimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
  ) {
    return _strftime(
      __s,
      __maxsize,
      __format,
      __tp,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int strftime_l(
    ffi.Pointer<ffi.Char> __s,
    int __maxsize,
    ffi.Pointer<ffi.Char> __format,
    ffi.Pointer<tm> __tp,
    locale_t __loc,
  ) {
    return _strftime_l(
      __s,
      __maxsize,
      __format,
      __tp,
      __loc,
    );
  }

  late final _strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>, locale_t)>>('strftime_l');
  late final _strftime_l = _strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, locale_t)>();

  ffi.Pointer<tm> gmtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _gmtime(
      __timer,
    );
  }

  late final _gmtimePtr = _lookup<
      ffi
      .NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>('gmtime');
  late final _gmtime =
      _gmtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> localtime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _localtime(
      __timer,
    );
  }

  late final _localtimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>(
      'localtime');
  late final _localtime =
      _localtimePtr.asFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<tm> gmtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _gmtime_r(
      __timer,
      __tp,
    );
  }

  late final _gmtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('gmtime_r');
  late final _gmtime_r = _gmtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<tm> localtime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<tm> __tp,
  ) {
    return _localtime_r(
      __timer,
      __tp,
    );
  }

  late final _localtime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(
              ffi.Pointer<time_t>, ffi.Pointer<tm>)>>('localtime_r');
  late final _localtime_r = _localtime_rPtr.asFunction<
      ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> __tp,
  ) {
    return _asctime(
      __tp,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  ffi.Pointer<ffi.Char> ctime(
    ffi.Pointer<time_t> __timer,
  ) {
    return _ctime(
      __timer,
    );
  }

  late final _ctimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>('ctime');
  late final _ctime = _ctimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>();

  ffi.Pointer<ffi.Char> asctime_r(
    ffi.Pointer<tm> __tp,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _asctime_r(
      __tp,
      __buf,
    );
  }

  late final _asctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>>('asctime_r');
  late final _asctime_r = _asctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ctime_r(
    ffi.Pointer<time_t> __timer,
    ffi.Pointer<ffi.Char> __buf,
  ) {
    return _ctime_r(
      __timer,
      __buf,
    );
  }

  late final _ctime_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>>('ctime_r');
  late final _ctime_r = _ctime_rPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int> ___daylight = _lookup<ffi.Int>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Long> ___timezone =
      _lookup<ffi.Long>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Char>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Char>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Char>> value) => _tzname.value = value;

  void tzset() {
    return _tzset();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset = _tzsetPtr.asFunction<void Function()>();

  late final ffi.Pointer<ffi.Int> _daylight = _lookup<ffi.Int>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Long> _timezone = _lookup<ffi.Long>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int timegm(
    ffi.Pointer<tm> __tp,
  ) {
    return _timegm(
      __tp,
    );
  }

  late final _timegmPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>('timegm');
  late final _timegm = _timegmPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int timelocal(
    ffi.Pointer<tm> __tp,
  ) {
    return _timelocal(
      __tp,
    );
  }

  late final _timelocalPtr =
      _lookup<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>(
          'timelocal');
  late final _timelocal =
      _timelocalPtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int dysize(
    int __year,
  ) {
    return _dysize(
      __year,
    );
  }

  late final _dysizePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('dysize');
  late final _dysize = _dysizePtr.asFunction<int Function(int)>();

  int nanosleep(
    ffi.Pointer<timespec> __requested_time,
    ffi.Pointer<timespec> __remaining,
  ) {
    return _nanosleep(
      __requested_time,
      __remaining,
    );
  }

  late final _nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>('nanosleep');
  late final _nanosleep = _nanosleepPtr
      .asFunction<int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getres(
    int __clock_id,
    ffi.Pointer<timespec> __res,
  ) {
    return _clock_getres(
      __clock_id,
      __res,
    );
  }

  late final _clock_getresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_getres');
  late final _clock_getres =
      _clock_getresPtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_gettime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_gettime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_gettime');
  late final _clock_gettime =
      _clock_gettimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_settime(
    int __clock_id,
    ffi.Pointer<timespec> __tp,
  ) {
    return _clock_settime(
      __clock_id,
      __tp,
    );
  }

  late final _clock_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>('clock_settime');
  late final _clock_settime =
      _clock_settimePtr.asFunction<int Function(int, ffi.Pointer<timespec>)>();

  int clock_nanosleep(
    int __clock_id,
    int __flags,
    ffi.Pointer<timespec> __req,
    ffi.Pointer<timespec> __rem,
  ) {
    return _clock_nanosleep(
      __clock_id,
      __flags,
      __req,
      __rem,
    );
  }

  late final _clock_nanosleepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>>('clock_nanosleep');
  late final _clock_nanosleep = _clock_nanosleepPtr.asFunction<
      int Function(int, int, ffi.Pointer<timespec>, ffi.Pointer<timespec>)>();

  int clock_getcpuclockid(
    int __pid,
    ffi.Pointer<clockid_t> __clock_id,
  ) {
    return _clock_getcpuclockid(
      __pid,
      __clock_id,
    );
  }

  late final _clock_getcpuclockidPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>(
      'clock_getcpuclockid');
  late final _clock_getcpuclockid = _clock_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<clockid_t>)>();

  int timer_create(
    int __clock_id,
    ffi.Pointer<sigevent> __evp,
    ffi.Pointer<timer_t> __timerid,
  ) {
    return _timer_create(
      __clock_id,
      __evp,
      __timerid,
    );
  }

  late final _timer_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Pointer<sigevent>,
              ffi.Pointer<timer_t>)>>('timer_create');
  late final _timer_create = _timer_createPtr.asFunction<
      int Function(int, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>();

  int timer_delete(
    timer_t __timerid,
  ) {
    return _timer_delete(
      __timerid,
    );
  }

  late final _timer_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>('timer_delete');
  late final _timer_delete =
      _timer_deletePtr.asFunction<int Function(timer_t)>();

  int timer_settime(
    timer_t __timerid,
    int __flags,
    ffi.Pointer<itimerspec> __value,
    ffi.Pointer<itimerspec> __ovalue,
  ) {
    return _timer_settime(
      __timerid,
      __flags,
      __value,
      __ovalue,
    );
  }

  late final _timer_settimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>>('timer_settime');
  late final _timer_settime = _timer_settimePtr.asFunction<
      int Function(
          timer_t, int, ffi.Pointer<itimerspec>, ffi.Pointer<itimerspec>)>();

  int timer_gettime(
    timer_t __timerid,
    ffi.Pointer<itimerspec> __value,
  ) {
    return _timer_gettime(
      __timerid,
      __value,
    );
  }

  late final _timer_gettimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>('timer_gettime');
  late final _timer_gettime = _timer_gettimePtr
      .asFunction<int Function(timer_t, ffi.Pointer<itimerspec>)>();

  int timer_getoverrun(
    timer_t __timerid,
  ) {
    return _timer_getoverrun(
      __timerid,
    );
  }

  late final _timer_getoverrunPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(timer_t)>>(
          'timer_getoverrun');
  late final _timer_getoverrun =
      _timer_getoverrunPtr.asFunction<int Function(timer_t)>();

  int timespec_get(
    ffi.Pointer<timespec> __ts,
    int __base,
  ) {
    return _timespec_get(
      __ts,
      __base,
    );
  }

  late final _timespec_getPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>(
      'timespec_get');
  late final _timespec_get =
      _timespec_getPtr.asFunction<int Function(ffi.Pointer<timespec>, int)>();

  int pthread_create(
    ffi.Pointer<pthread_t> __newthread,
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        __start_routine,
    ffi.Pointer<ffi.Void> __arg,
  ) {
    return _pthread_create(
      __newthread,
      __attr,
      __start_routine,
      __arg,
    );
  }

  late final _pthread_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('pthread_create');
  late final _pthread_create = _pthread_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_t>,
          ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void pthread_exit(
    ffi.Pointer<ffi.Void> __retval,
  ) {
    return _pthread_exit(
      __retval,
    );
  }

  late final _pthread_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'pthread_exit');
  late final _pthread_exit =
      _pthread_exitPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int pthread_join(
    int __th,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __thread_return,
  ) {
    return _pthread_join(
      __th,
      __thread_return,
    );
  }

  late final _pthread_joinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('pthread_join');
  late final _pthread_join = _pthread_joinPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_detach(
    int __th,
  ) {
    return _pthread_detach(
      __th,
    );
  }

  late final _pthread_detachPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_detach');
  late final _pthread_detach =
      _pthread_detachPtr.asFunction<int Function(int)>();

  int pthread_self() {
    return _pthread_self();
  }

  late final _pthread_selfPtr =
      _lookup<ffi.NativeFunction<pthread_t Function()>>('pthread_self');
  late final _pthread_self = _pthread_selfPtr.asFunction<int Function()>();

  int pthread_equal(
    int __thread1,
    int __thread2,
  ) {
    return _pthread_equal(
      __thread1,
      __thread2,
    );
  }

  late final _pthread_equalPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>(
          'pthread_equal');
  late final _pthread_equal =
      _pthread_equalPtr.asFunction<int Function(int, int)>();

  int pthread_attr_init(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_init(
      __attr,
    );
  }

  late final _pthread_attr_initPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_init');
  late final _pthread_attr_init = _pthread_attr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_destroy(
    ffi.Pointer<pthread_attr_t> __attr,
  ) {
    return _pthread_attr_destroy(
      __attr,
    );
  }

  late final _pthread_attr_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>(
      'pthread_attr_destroy');
  late final _pthread_attr_destroy = _pthread_attr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>)>();

  int pthread_attr_getdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __detachstate,
  ) {
    return _pthread_attr_getdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_getdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getdetachstate');
  late final _pthread_attr_getdetachstate =
      _pthread_attr_getdetachstatePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setdetachstate(
    ffi.Pointer<pthread_attr_t> __attr,
    int __detachstate,
  ) {
    return _pthread_attr_setdetachstate(
      __attr,
      __detachstate,
    );
  }

  late final _pthread_attr_setdetachstatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setdetachstate');
  late final _pthread_attr_setdetachstate = _pthread_attr_setdetachstatePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __guardsize,
  ) {
    return _pthread_attr_getguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_getguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getguardsize');
  late final _pthread_attr_getguardsize =
      _pthread_attr_getguardsizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setguardsize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __guardsize,
  ) {
    return _pthread_attr_setguardsize(
      __attr,
      __guardsize,
    );
  }

  late final _pthread_attr_setguardsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setguardsize');
  late final _pthread_attr_setguardsize = _pthread_attr_setguardsizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_getschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_getschedparam');
  late final _pthread_attr_getschedparam =
      _pthread_attr_getschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_setschedparam(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_attr_setschedparam(
      __attr,
      __param,
    );
  }

  late final _pthread_attr_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<sched_param>)>>('pthread_attr_setschedparam');
  late final _pthread_attr_setschedparam =
      _pthread_attr_setschedparamPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>();

  int pthread_attr_getschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __policy,
  ) {
    return _pthread_attr_getschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_getschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getschedpolicy');
  late final _pthread_attr_getschedpolicy =
      _pthread_attr_getschedpolicyPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setschedpolicy(
    ffi.Pointer<pthread_attr_t> __attr,
    int __policy,
  ) {
    return _pthread_attr_setschedpolicy(
      __attr,
      __policy,
    );
  }

  late final _pthread_attr_setschedpolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setschedpolicy');
  late final _pthread_attr_setschedpolicy = _pthread_attr_setschedpolicyPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __inherit,
  ) {
    return _pthread_attr_getinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_getinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getinheritsched');
  late final _pthread_attr_getinheritsched =
      _pthread_attr_getinheritschedPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setinheritsched(
    ffi.Pointer<pthread_attr_t> __attr,
    int __inherit,
  ) {
    return _pthread_attr_setinheritsched(
      __attr,
      __inherit,
    );
  }

  late final _pthread_attr_setinheritschedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Int)>>('pthread_attr_setinheritsched');
  late final _pthread_attr_setinheritsched = _pthread_attr_setinheritschedPtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getscope(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Int> __scope,
  ) {
    return _pthread_attr_getscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_getscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_attr_getscope');
  late final _pthread_attr_getscope = _pthread_attr_getscopePtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_attr_setscope(
    ffi.Pointer<pthread_attr_t> __attr,
    int __scope,
  ) {
    return _pthread_attr_setscope(
      __attr,
      __scope,
    );
  }

  late final _pthread_attr_setscopePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>, ffi.Int)>>('pthread_attr_setscope');
  late final _pthread_attr_setscope = _pthread_attr_setscopePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
  ) {
    return _pthread_attr_getstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_getstackaddrPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>(
      'pthread_attr_getstackaddr');
  late final _pthread_attr_getstackaddr =
      _pthread_attr_getstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int pthread_attr_setstackaddr(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
  ) {
    return _pthread_attr_setstackaddr(
      __attr,
      __stackaddr,
    );
  }

  late final _pthread_attr_setstackaddrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Void>)>>('pthread_attr_setstackaddr');
  late final _pthread_attr_setstackaddr =
      _pthread_attr_setstackaddrPtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>();

  int pthread_attr_getstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstacksize');
  late final _pthread_attr_getstacksize =
      _pthread_attr_getstacksizePtr.asFunction<
          int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstacksize(
    ffi.Pointer<pthread_attr_t> __attr,
    int __stacksize,
  ) {
    return _pthread_attr_setstacksize(
      __attr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstacksizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>,
              ffi.Size)>>('pthread_attr_setstacksize');
  late final _pthread_attr_setstacksize = _pthread_attr_setstacksizePtr
      .asFunction<int Function(ffi.Pointer<pthread_attr_t>, int)>();

  int pthread_attr_getstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Pointer<ffi.Void>> __stackaddr,
    ffi.Pointer<ffi.Size> __stacksize,
  ) {
    return _pthread_attr_getstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_getstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>>('pthread_attr_getstack');
  late final _pthread_attr_getstack = _pthread_attr_getstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>,
          ffi.Pointer<ffi.Pointer<ffi.Void>>, ffi.Pointer<ffi.Size>)>();

  int pthread_attr_setstack(
    ffi.Pointer<pthread_attr_t> __attr,
    ffi.Pointer<ffi.Void> __stackaddr,
    int __stacksize,
  ) {
    return _pthread_attr_setstack(
      __attr,
      __stackaddr,
      __stacksize,
    );
  }

  late final _pthread_attr_setstackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('pthread_attr_setstack');
  late final _pthread_attr_setstack = _pthread_attr_setstackPtr.asFunction<
      int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>, int)>();

  int pthread_setschedparam(
    int __target_thread,
    int __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_setschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_setschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Int,
              ffi.Pointer<sched_param>)>>('pthread_setschedparam');
  late final _pthread_setschedparam = _pthread_setschedparamPtr
      .asFunction<int Function(int, int, ffi.Pointer<sched_param>)>();

  int pthread_getschedparam(
    int __target_thread,
    ffi.Pointer<ffi.Int> __policy,
    ffi.Pointer<sched_param> __param,
  ) {
    return _pthread_getschedparam(
      __target_thread,
      __policy,
      __param,
    );
  }

  late final _pthread_getschedparamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(pthread_t, ffi.Pointer<ffi.Int>,
              ffi.Pointer<sched_param>)>>('pthread_getschedparam');
  late final _pthread_getschedparam = _pthread_getschedparamPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>();

  int pthread_setschedprio(
    int __target_thread,
    int __prio,
  ) {
    return _pthread_setschedprio(
      __target_thread,
      __prio,
    );
  }

  late final _pthread_setschedprioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>(
          'pthread_setschedprio');
  late final _pthread_setschedprio =
      _pthread_setschedprioPtr.asFunction<int Function(int, int)>();

  int pthread_once(
    ffi.Pointer<pthread_once_t> __once_control,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __init_routine,
  ) {
    return _pthread_once(
      __once_control,
      __init_routine,
    );
  }

  late final _pthread_oncePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_once');
  late final _pthread_once = _pthread_oncePtr.asFunction<
      int Function(ffi.Pointer<pthread_once_t>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  int pthread_setcancelstate(
    int __state,
    ffi.Pointer<ffi.Int> __oldstate,
  ) {
    return _pthread_setcancelstate(
      __state,
      __oldstate,
    );
  }

  late final _pthread_setcancelstatePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcancelstate');
  late final _pthread_setcancelstate = _pthread_setcancelstatePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_setcanceltype(
    int __type,
    ffi.Pointer<ffi.Int> __oldtype,
  ) {
    return _pthread_setcanceltype(
      __type,
      __oldtype,
    );
  }

  late final _pthread_setcanceltypePtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>(
      'pthread_setcanceltype');
  late final _pthread_setcanceltype = _pthread_setcanceltypePtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Int>)>();

  int pthread_cancel(
    int __th,
  ) {
    return _pthread_cancel(
      __th,
    );
  }

  late final _pthread_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_t)>>(
          'pthread_cancel');
  late final _pthread_cancel =
      _pthread_cancelPtr.asFunction<int Function(int)>();

  void pthread_testcancel() {
    return _pthread_testcancel();
  }

  late final _pthread_testcancelPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('pthread_testcancel');
  late final _pthread_testcancel =
      _pthread_testcancelPtr.asFunction<void Function()>();

  void __pthread_register_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_register_cancel(
      __buf,
    );
  }

  late final ___pthread_register_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_register_cancel');
  late final ___pthread_register_cancel = ___pthread_register_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unregister_cancel(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unregister_cancel(
      __buf,
    );
  }

  late final ___pthread_unregister_cancelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>(
      '__pthread_unregister_cancel');
  late final ___pthread_unregister_cancel = ___pthread_unregister_cancelPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  void __pthread_unwind_next(
    ffi.Pointer<__pthread_unwind_buf_t> __buf,
  ) {
    return ___pthread_unwind_next(
      __buf,
    );
  }

  late final ___pthread_unwind_nextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<__pthread_unwind_buf_t>)>>('__pthread_unwind_next');
  late final ___pthread_unwind_next = ___pthread_unwind_nextPtr
      .asFunction<void Function(ffi.Pointer<__pthread_unwind_buf_t>)>();

  int __sigsetjmp(
    ffi.Pointer<__jmp_buf_tag> __env,
    int __savemask,
  ) {
    return ___sigsetjmp(
      __env,
      __savemask,
    );
  }

  late final ___sigsetjmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<__jmp_buf_tag>, ffi.Int)>>('__sigsetjmp');
  late final ___sigsetjmp = ___sigsetjmpPtr
      .asFunction<int Function(ffi.Pointer<__jmp_buf_tag>, int)>();

  int pthread_mutex_init(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<pthread_mutexattr_t> __mutexattr,
  ) {
    return _pthread_mutex_init(
      __mutex,
      __mutexattr,
    );
  }

  late final _pthread_mutex_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>>('pthread_mutex_init');
  late final _pthread_mutex_init = _pthread_mutex_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_mutex_t>, ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutex_destroy(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_destroy(
      __mutex,
    );
  }

  late final _pthread_mutex_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_destroy');
  late final _pthread_mutex_destroy = _pthread_mutex_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_trylock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_trylock(
      __mutex,
    );
  }

  late final _pthread_mutex_trylockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_trylock');
  late final _pthread_mutex_trylock = _pthread_mutex_trylockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_lock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_lock(
      __mutex,
    );
  }

  late final _pthread_mutex_lockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_lock');
  late final _pthread_mutex_lock = _pthread_mutex_lockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_timedlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_mutex_timedlock(
      __mutex,
      __abstime,
    );
  }

  late final _pthread_mutex_timedlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_mutex_timedlock');
  late final _pthread_mutex_timedlock = _pthread_mutex_timedlockPtr.asFunction<
      int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>();

  int pthread_mutex_unlock(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_unlock(
      __mutex,
    );
  }

  late final _pthread_mutex_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_unlock');
  late final _pthread_mutex_unlock = _pthread_mutex_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutex_getprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutex_getprioceiling(
      __mutex,
      __prioceiling,
    );
  }

  late final _pthread_mutex_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_getprioceiling');
  late final _pthread_mutex_getprioceiling =
      _pthread_mutex_getprioceilingPtr.asFunction<
          int Function(ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_setprioceiling(
    ffi.Pointer<pthread_mutex_t> __mutex,
    int __prioceiling,
    ffi.Pointer<ffi.Int> __old_ceiling,
  ) {
    return _pthread_mutex_setprioceiling(
      __mutex,
      __prioceiling,
      __old_ceiling,
    );
  }

  late final _pthread_mutex_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('pthread_mutex_setprioceiling');
  late final _pthread_mutex_setprioceiling =
      _pthread_mutex_setprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutex_t>, int, ffi.Pointer<ffi.Int>)>();

  int pthread_mutex_consistent(
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_mutex_consistent(
      __mutex,
    );
  }

  late final _pthread_mutex_consistentPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>(
      'pthread_mutex_consistent');
  late final _pthread_mutex_consistent = _pthread_mutex_consistentPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutex_t>)>();

  int pthread_mutexattr_init(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_init(
      __attr,
    );
  }

  late final _pthread_mutexattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_init');
  late final _pthread_mutexattr_init = _pthread_mutexattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_destroy(
    ffi.Pointer<pthread_mutexattr_t> __attr,
  ) {
    return _pthread_mutexattr_destroy(
      __attr,
    );
  }

  late final _pthread_mutexattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>(
      'pthread_mutexattr_destroy');
  late final _pthread_mutexattr_destroy = _pthread_mutexattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>)>();

  int pthread_mutexattr_getpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_mutexattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getpshared');
  late final _pthread_mutexattr_getpshared =
      _pthread_mutexattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setpshared(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_mutexattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_mutexattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setpshared');
  late final _pthread_mutexattr_setpshared = _pthread_mutexattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_gettype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __kind,
  ) {
    return _pthread_mutexattr_gettype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_gettypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_gettype');
  late final _pthread_mutexattr_gettype =
      _pthread_mutexattr_gettypePtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_settype(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __kind,
  ) {
    return _pthread_mutexattr_settype(
      __attr,
      __kind,
    );
  }

  late final _pthread_mutexattr_settypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_settype');
  late final _pthread_mutexattr_settype = _pthread_mutexattr_settypePtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __protocol,
  ) {
    return _pthread_mutexattr_getprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_getprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprotocol');
  late final _pthread_mutexattr_getprotocol =
      _pthread_mutexattr_getprotocolPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprotocol(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __protocol,
  ) {
    return _pthread_mutexattr_setprotocol(
      __attr,
      __protocol,
    );
  }

  late final _pthread_mutexattr_setprotocolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprotocol');
  late final _pthread_mutexattr_setprotocol = _pthread_mutexattr_setprotocolPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __prioceiling,
  ) {
    return _pthread_mutexattr_getprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_getprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getprioceiling');
  late final _pthread_mutexattr_getprioceiling =
      _pthread_mutexattr_getprioceilingPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setprioceiling(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __prioceiling,
  ) {
    return _pthread_mutexattr_setprioceiling(
      __attr,
      __prioceiling,
    );
  }

  late final _pthread_mutexattr_setprioceilingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setprioceiling');
  late final _pthread_mutexattr_setprioceiling =
      _pthread_mutexattr_setprioceilingPtr
          .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_mutexattr_getrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    ffi.Pointer<ffi.Int> __robustness,
  ) {
    return _pthread_mutexattr_getrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_getrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_mutexattr_getrobust');
  late final _pthread_mutexattr_getrobust =
      _pthread_mutexattr_getrobustPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_mutexattr_setrobust(
    ffi.Pointer<pthread_mutexattr_t> __attr,
    int __robustness,
  ) {
    return _pthread_mutexattr_setrobust(
      __attr,
      __robustness,
    );
  }

  late final _pthread_mutexattr_setrobustPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>,
              ffi.Int)>>('pthread_mutexattr_setrobust');
  late final _pthread_mutexattr_setrobust = _pthread_mutexattr_setrobustPtr
      .asFunction<int Function(ffi.Pointer<pthread_mutexattr_t>, int)>();

  int pthread_rwlock_init(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlock_init(
      __rwlock,
      __attr,
    );
  }

  late final _pthread_rwlock_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>>('pthread_rwlock_init');
  late final _pthread_rwlock_init = _pthread_rwlock_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlock_destroy(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_destroy(
      __rwlock,
    );
  }

  late final _pthread_rwlock_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_destroy');
  late final _pthread_rwlock_destroy = _pthread_rwlock_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_rdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_rdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_rdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_rdlock');
  late final _pthread_rwlock_rdlock = _pthread_rwlock_rdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_tryrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_tryrdlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_tryrdlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_tryrdlock');
  late final _pthread_rwlock_tryrdlock = _pthread_rwlock_tryrdlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedrdlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedrdlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedrdlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedrdlock');
  late final _pthread_rwlock_timedrdlock =
      _pthread_rwlock_timedrdlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_wrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_wrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_wrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_wrlock');
  late final _pthread_rwlock_wrlock = _pthread_rwlock_wrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_trywrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_trywrlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_trywrlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_trywrlock');
  late final _pthread_rwlock_trywrlock = _pthread_rwlock_trywrlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlock_timedwrlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_rwlock_timedwrlock(
      __rwlock,
      __abstime,
    );
  }

  late final _pthread_rwlock_timedwrlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<timespec>)>>('pthread_rwlock_timedwrlock');
  late final _pthread_rwlock_timedwrlock =
      _pthread_rwlock_timedwrlockPtr.asFunction<
          int Function(ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>();

  int pthread_rwlock_unlock(
    ffi.Pointer<pthread_rwlock_t> __rwlock,
  ) {
    return _pthread_rwlock_unlock(
      __rwlock,
    );
  }

  late final _pthread_rwlock_unlockPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>(
      'pthread_rwlock_unlock');
  late final _pthread_rwlock_unlock = _pthread_rwlock_unlockPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlock_t>)>();

  int pthread_rwlockattr_init(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_init(
      __attr,
    );
  }

  late final _pthread_rwlockattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_init');
  late final _pthread_rwlockattr_init = _pthread_rwlockattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_destroy(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
  ) {
    return _pthread_rwlockattr_destroy(
      __attr,
    );
  }

  late final _pthread_rwlockattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>(
      'pthread_rwlockattr_destroy');
  late final _pthread_rwlockattr_destroy = _pthread_rwlockattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>)>();

  int pthread_rwlockattr_getpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_rwlockattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getpshared');
  late final _pthread_rwlockattr_getpshared =
      _pthread_rwlockattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setpshared(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_rwlockattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_rwlockattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setpshared');
  late final _pthread_rwlockattr_setpshared = _pthread_rwlockattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_rwlockattr_getkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    ffi.Pointer<ffi.Int> __pref,
  ) {
    return _pthread_rwlockattr_getkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_getkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_rwlockattr_getkind_np');
  late final _pthread_rwlockattr_getkind_np =
      _pthread_rwlockattr_getkind_npPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_rwlockattr_setkind_np(
    ffi.Pointer<pthread_rwlockattr_t> __attr,
    int __pref,
  ) {
    return _pthread_rwlockattr_setkind_np(
      __attr,
      __pref,
    );
  }

  late final _pthread_rwlockattr_setkind_npPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>,
              ffi.Int)>>('pthread_rwlockattr_setkind_np');
  late final _pthread_rwlockattr_setkind_np = _pthread_rwlockattr_setkind_npPtr
      .asFunction<int Function(ffi.Pointer<pthread_rwlockattr_t>, int)>();

  int pthread_cond_init(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_condattr_t> __cond_attr,
  ) {
    return _pthread_cond_init(
      __cond,
      __cond_attr,
    );
  }

  late final _pthread_cond_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>>('pthread_cond_init');
  late final _pthread_cond_init = _pthread_cond_initPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_condattr_t>)>();

  int pthread_cond_destroy(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_destroy(
      __cond,
    );
  }

  late final _pthread_cond_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_destroy');
  late final _pthread_cond_destroy = _pthread_cond_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_signal(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_signal(
      __cond,
    );
  }

  late final _pthread_cond_signalPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_signal');
  late final _pthread_cond_signal = _pthread_cond_signalPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_broadcast(
    ffi.Pointer<pthread_cond_t> __cond,
  ) {
    return _pthread_cond_broadcast(
      __cond,
    );
  }

  late final _pthread_cond_broadcastPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>(
      'pthread_cond_broadcast');
  late final _pthread_cond_broadcast = _pthread_cond_broadcastPtr
      .asFunction<int Function(ffi.Pointer<pthread_cond_t>)>();

  int pthread_cond_wait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
  ) {
    return _pthread_cond_wait(
      __cond,
      __mutex,
    );
  }

  late final _pthread_cond_waitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>)>>('pthread_cond_wait');
  late final _pthread_cond_wait = _pthread_cond_waitPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>();

  int pthread_cond_timedwait(
    ffi.Pointer<pthread_cond_t> __cond,
    ffi.Pointer<pthread_mutex_t> __mutex,
    ffi.Pointer<timespec> __abstime,
  ) {
    return _pthread_cond_timedwait(
      __cond,
      __mutex,
      __abstime,
    );
  }

  late final _pthread_cond_timedwaitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>>('pthread_cond_timedwait');
  late final _pthread_cond_timedwait = _pthread_cond_timedwaitPtr.asFunction<
      int Function(ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>,
          ffi.Pointer<timespec>)>();

  int pthread_condattr_init(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_init(
      __attr,
    );
  }

  late final _pthread_condattr_initPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_init');
  late final _pthread_condattr_init = _pthread_condattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_destroy(
    ffi.Pointer<pthread_condattr_t> __attr,
  ) {
    return _pthread_condattr_destroy(
      __attr,
    );
  }

  late final _pthread_condattr_destroyPtr = _lookup<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>(
      'pthread_condattr_destroy');
  late final _pthread_condattr_destroy = _pthread_condattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>)>();

  int pthread_condattr_getpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_condattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_condattr_getpshared');
  late final _pthread_condattr_getpshared =
      _pthread_condattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_condattr_setpshared(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_condattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_condattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Int)>>('pthread_condattr_setpshared');
  late final _pthread_condattr_setpshared = _pthread_condattr_setpsharedPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_condattr_getclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_condattr_getclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_getclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              ffi.Pointer<__clockid_t>)>>('pthread_condattr_getclock');
  late final _pthread_condattr_getclock =
      _pthread_condattr_getclockPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>();

  int pthread_condattr_setclock(
    ffi.Pointer<pthread_condattr_t> __attr,
    int __clock_id,
  ) {
    return _pthread_condattr_setclock(
      __attr,
      __clock_id,
    );
  }

  late final _pthread_condattr_setclockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_condattr_t>,
              __clockid_t)>>('pthread_condattr_setclock');
  late final _pthread_condattr_setclock = _pthread_condattr_setclockPtr
      .asFunction<int Function(ffi.Pointer<pthread_condattr_t>, int)>();

  int pthread_barrier_init(
    ffi.Pointer<pthread_barrier_t> __barrier,
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __count,
  ) {
    return _pthread_barrier_init(
      __barrier,
      __attr,
      __count,
    );
  }

  late final _pthread_barrier_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>>('pthread_barrier_init');
  late final _pthread_barrier_init = _pthread_barrier_initPtr.asFunction<
      int Function(ffi.Pointer<pthread_barrier_t>,
          ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_barrier_destroy(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_destroy(
      __barrier,
    );
  }

  late final _pthread_barrier_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_destroy');
  late final _pthread_barrier_destroy = _pthread_barrier_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrier_wait(
    ffi.Pointer<pthread_barrier_t> __barrier,
  ) {
    return _pthread_barrier_wait(
      __barrier,
    );
  }

  late final _pthread_barrier_waitPtr = _lookup<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>(
      'pthread_barrier_wait');
  late final _pthread_barrier_wait = _pthread_barrier_waitPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrier_t>)>();

  int pthread_barrierattr_init(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_init(
      __attr,
    );
  }

  late final _pthread_barrierattr_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrierattr_t>)>>('pthread_barrierattr_init');
  late final _pthread_barrierattr_init = _pthread_barrierattr_initPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_destroy(
    ffi.Pointer<pthread_barrierattr_t> __attr,
  ) {
    return _pthread_barrierattr_destroy(
      __attr,
    );
  }

  late final _pthread_barrierattr_destroyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>(
      'pthread_barrierattr_destroy');
  late final _pthread_barrierattr_destroy = _pthread_barrierattr_destroyPtr
      .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>)>();

  int pthread_barrierattr_getpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    ffi.Pointer<ffi.Int> __pshared,
  ) {
    return _pthread_barrierattr_getpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_getpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Pointer<ffi.Int>)>>('pthread_barrierattr_getpshared');
  late final _pthread_barrierattr_getpshared =
      _pthread_barrierattr_getpsharedPtr.asFunction<
          int Function(
              ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>();

  int pthread_barrierattr_setpshared(
    ffi.Pointer<pthread_barrierattr_t> __attr,
    int __pshared,
  ) {
    return _pthread_barrierattr_setpshared(
      __attr,
      __pshared,
    );
  }

  late final _pthread_barrierattr_setpsharedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>,
              ffi.Int)>>('pthread_barrierattr_setpshared');
  late final _pthread_barrierattr_setpshared =
      _pthread_barrierattr_setpsharedPtr
          .asFunction<int Function(ffi.Pointer<pthread_barrierattr_t>, int)>();

  int pthread_key_create(
    ffi.Pointer<pthread_key_t> __key,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
        __destr_function,
  ) {
    return _pthread_key_create(
      __key,
      __destr_function,
    );
  }

  late final _pthread_key_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_key_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void>)>>)>>('pthread_key_create');
  late final _pthread_key_create = _pthread_key_createPtr.asFunction<
      int Function(
          ffi.Pointer<pthread_key_t>,
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>();

  int pthread_key_delete(
    int __key,
  ) {
    return _pthread_key_delete(
      __key,
    );
  }

  late final _pthread_key_deletePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>(
          'pthread_key_delete');
  late final _pthread_key_delete =
      _pthread_key_deletePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> pthread_getspecific(
    int __key,
  ) {
    return _pthread_getspecific(
      __key,
    );
  }

  late final _pthread_getspecificPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>(
      'pthread_getspecific');
  late final _pthread_getspecific =
      _pthread_getspecificPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int pthread_setspecific(
    int __key,
    ffi.Pointer<ffi.Void> __pointer,
  ) {
    return _pthread_setspecific(
      __key,
      __pointer,
    );
  }

  late final _pthread_setspecificPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_key_t, ffi.Pointer<ffi.Void>)>>('pthread_setspecific');
  late final _pthread_setspecific = _pthread_setspecificPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Void>)>();

  int pthread_getcpuclockid(
    int __thread_id,
    ffi.Pointer<__clockid_t> __clock_id,
  ) {
    return _pthread_getcpuclockid(
      __thread_id,
      __clock_id,
    );
  }

  late final _pthread_getcpuclockidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              pthread_t, ffi.Pointer<__clockid_t>)>>('pthread_getcpuclockid');
  late final _pthread_getcpuclockid = _pthread_getcpuclockidPtr
      .asFunction<int Function(int, ffi.Pointer<__clockid_t>)>();

  int pthread_atfork(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __prepare,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __parent,
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> __child,
  ) {
    return _pthread_atfork(
      __prepare,
      __parent,
      __child,
    );
  }

  late final _pthread_atforkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'pthread_atfork');
  late final _pthread_atfork = _pthread_atforkPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
          ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void SPDConnectionAddress__free(
    ffi.Pointer<SPDConnectionAddress> address,
  ) {
    return _SPDConnectionAddress__free(
      address,
    );
  }

  late final _SPDConnectionAddress__freePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<SPDConnectionAddress>)>>(
      'SPDConnectionAddress__free');
  late final _SPDConnectionAddress__free = _SPDConnectionAddress__freePtr
      .asFunction<void Function(ffi.Pointer<SPDConnectionAddress>)>();

  ffi.Pointer<SPDConnectionAddress> spd_get_default_address(
    ffi.Pointer<ffi.Pointer<ffi.Char>> error,
  ) {
    return _spd_get_default_address(
      error,
    );
  }

  late final _spd_get_default_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SPDConnectionAddress> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('spd_get_default_address');
  late final _spd_get_default_address = _spd_get_default_addressPtr.asFunction<
      ffi.Pointer<SPDConnectionAddress> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<SPDConnection> spd_open(
    ffi.Pointer<ffi.Char> client_name,
    ffi.Pointer<ffi.Char> connection_name,
    ffi.Pointer<ffi.Char> user_name,
    int mode,
  ) {
    return _spd_open(
      client_name,
      connection_name,
      user_name,
      mode,
    );
  }

  late final _spd_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SPDConnection> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('spd_open');
  late final _spd_open = _spd_openPtr.asFunction<
      ffi.Pointer<SPDConnection> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<SPDConnection> spd_open2(
    ffi.Pointer<ffi.Char> client_name,
    ffi.Pointer<ffi.Char> connection_name,
    ffi.Pointer<ffi.Char> user_name,
    int mode,
    ffi.Pointer<SPDConnectionAddress> address,
    int autospawn,
    ffi.Pointer<ffi.Pointer<ffi.Char>> error_result,
  ) {
    return _spd_open2(
      client_name,
      connection_name,
      user_name,
      mode,
      address,
      autospawn,
      error_result,
    );
  }

  late final _spd_open2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SPDConnection> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<SPDConnectionAddress>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('spd_open2');
  late final _spd_open2 = _spd_open2Ptr.asFunction<
      ffi.Pointer<SPDConnection> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<SPDConnectionAddress>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int spd_get_client_id(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_client_id(
      connection,
    );
  }

  late final _spd_get_client_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_get_client_id');
  late final _spd_get_client_id = _spd_get_client_idPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  void spd_close(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_close(
      connection,
    );
  }

  late final _spd_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SPDConnection>)>>(
      'spd_close');
  late final _spd_close =
      _spd_closePtr.asFunction<void Function(ffi.Pointer<SPDConnection>)>();

  int spd_say(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    ffi.Pointer<ffi.Char> text,
  ) {
    return _spd_say(
      connection,
      priority,
      text,
    );
  }

  late final _spd_sayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_say');
  late final _spd_say = _spd_sayPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_sayf(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    ffi.Pointer<ffi.Char> format,
  ) {
    return _spd_sayf(
      connection,
      priority,
      format,
    );
  }

  late final _spd_sayfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_sayf');
  late final _spd_sayf = _spd_sayfPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_stop(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_stop(
      connection,
    );
  }

  late final _spd_stopPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_stop');
  late final _spd_stop =
      _spd_stopPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_stop_all(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_stop_all(
      connection,
    );
  }

  late final _spd_stop_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_stop_all');
  late final _spd_stop_all =
      _spd_stop_allPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_stop_uid(
    ffi.Pointer<SPDConnection> connection,
    int target_uid,
  ) {
    return _spd_stop_uid(
      connection,
      target_uid,
    );
  }

  late final _spd_stop_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_stop_uid');
  late final _spd_stop_uid = _spd_stop_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_cancel(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_cancel(
      connection,
    );
  }

  late final _spd_cancelPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_cancel');
  late final _spd_cancel =
      _spd_cancelPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_cancel_all(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_cancel_all(
      connection,
    );
  }

  late final _spd_cancel_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_cancel_all');
  late final _spd_cancel_all =
      _spd_cancel_allPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_cancel_uid(
    ffi.Pointer<SPDConnection> connection,
    int target_uid,
  ) {
    return _spd_cancel_uid(
      connection,
      target_uid,
    );
  }

  late final _spd_cancel_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_cancel_uid');
  late final _spd_cancel_uid = _spd_cancel_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_pause(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_pause(
      connection,
    );
  }

  late final _spd_pausePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_pause');
  late final _spd_pause =
      _spd_pausePtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_pause_all(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_pause_all(
      connection,
    );
  }

  late final _spd_pause_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_pause_all');
  late final _spd_pause_all =
      _spd_pause_allPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_pause_uid(
    ffi.Pointer<SPDConnection> connection,
    int target_uid,
  ) {
    return _spd_pause_uid(
      connection,
      target_uid,
    );
  }

  late final _spd_pause_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_pause_uid');
  late final _spd_pause_uid = _spd_pause_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_resume(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_resume(
      connection,
    );
  }

  late final _spd_resumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_resume');
  late final _spd_resume =
      _spd_resumePtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_resume_all(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_resume_all(
      connection,
    );
  }

  late final _spd_resume_allPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_resume_all');
  late final _spd_resume_all =
      _spd_resume_allPtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_resume_uid(
    ffi.Pointer<SPDConnection> connection,
    int target_uid,
  ) {
    return _spd_resume_uid(
      connection,
      target_uid,
    );
  }

  late final _spd_resume_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_resume_uid');
  late final _spd_resume_uid = _spd_resume_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_key(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    ffi.Pointer<ffi.Char> key_name,
  ) {
    return _spd_key(
      connection,
      priority,
      key_name,
    );
  }

  late final _spd_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_key');
  late final _spd_key = _spd_keyPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_char(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    ffi.Pointer<ffi.Char> character,
  ) {
    return _spd_char(
      connection,
      priority,
      character,
    );
  }

  late final _spd_charPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_char');
  late final _spd_char = _spd_charPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_wchar(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    int wcharacter,
  ) {
    return _spd_wchar(
      connection,
      priority,
      wcharacter,
    );
  }

  late final _spd_wcharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32, ffi.WChar)>>('spd_wchar');
  late final _spd_wchar = _spd_wcharPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_sound_icon(
    ffi.Pointer<SPDConnection> connection,
    int priority,
    ffi.Pointer<ffi.Char> icon_name,
  ) {
    return _spd_sound_icon(
      connection,
      priority,
      icon_name,
    );
  }

  late final _spd_sound_iconPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_sound_icon');
  late final _spd_sound_icon = _spd_sound_iconPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_set_voice_type(
    ffi.Pointer<SPDConnection> arg0,
    int type,
  ) {
    return _spd_set_voice_type(
      arg0,
      type,
    );
  }

  late final _spd_set_voice_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32)>>('spd_set_voice_type');
  late final _spd_set_voice_type = _spd_set_voice_typePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_type_all(
    ffi.Pointer<SPDConnection> arg0,
    int type,
  ) {
    return _spd_set_voice_type_all(
      arg0,
      type,
    );
  }

  late final _spd_set_voice_type_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_voice_type_all');
  late final _spd_set_voice_type_all = _spd_set_voice_type_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_type_uid(
    ffi.Pointer<SPDConnection> arg0,
    int type,
    int uid,
  ) {
    return _spd_set_voice_type_uid(
      arg0,
      type,
      uid,
    );
  }

  late final _spd_set_voice_type_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.UnsignedInt)>>('spd_set_voice_type_uid');
  late final _spd_set_voice_type_uid = _spd_set_voice_type_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_get_voice_type(
    ffi.Pointer<SPDConnection> arg0,
  ) {
    return _spd_get_voice_type(
      arg0,
    );
  }

  late final _spd_get_voice_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<SPDConnection>)>>(
      'spd_get_voice_type');
  late final _spd_get_voice_type = _spd_get_voice_typePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_set_synthesis_voice(
    ffi.Pointer<SPDConnection> arg0,
    ffi.Pointer<ffi.Char> voice_name,
  ) {
    return _spd_set_synthesis_voice(
      arg0,
      voice_name,
    );
  }

  late final _spd_set_synthesis_voicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_synthesis_voice');
  late final _spd_set_synthesis_voice = _spd_set_synthesis_voicePtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_synthesis_voice_all(
    ffi.Pointer<SPDConnection> arg0,
    ffi.Pointer<ffi.Char> voice_name,
  ) {
    return _spd_set_synthesis_voice_all(
      arg0,
      voice_name,
    );
  }

  late final _spd_set_synthesis_voice_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_synthesis_voice_all');
  late final _spd_set_synthesis_voice_all =
      _spd_set_synthesis_voice_allPtr.asFunction<
          int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_synthesis_voice_uid(
    ffi.Pointer<SPDConnection> arg0,
    ffi.Pointer<ffi.Char> voice_name,
    int uid,
  ) {
    return _spd_set_synthesis_voice_uid(
      arg0,
      voice_name,
      uid,
    );
  }

  late final _spd_set_synthesis_voice_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('spd_set_synthesis_voice_uid');
  late final _spd_set_synthesis_voice_uid =
      _spd_set_synthesis_voice_uidPtr.asFunction<
          int Function(
              ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, int)>();

  int spd_set_data_mode(
    ffi.Pointer<SPDConnection> connection,
    int mode,
  ) {
    return _spd_set_data_mode(
      connection,
      mode,
    );
  }

  late final _spd_set_data_modePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32)>>('spd_set_data_mode');
  late final _spd_set_data_mode = _spd_set_data_modePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_notification_on(
    ffi.Pointer<SPDConnection> connection,
    int notification,
  ) {
    return _spd_set_notification_on(
      connection,
      notification,
    );
  }

  late final _spd_set_notification_onPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_notification_on');
  late final _spd_set_notification_on = _spd_set_notification_onPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_notification_off(
    ffi.Pointer<SPDConnection> connection,
    int notification,
  ) {
    return _spd_set_notification_off(
      connection,
      notification,
    );
  }

  late final _spd_set_notification_offPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_notification_off');
  late final _spd_set_notification_off = _spd_set_notification_offPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_notification(
    ffi.Pointer<SPDConnection> connection,
    int notification,
    ffi.Pointer<ffi.Char> state,
  ) {
    return _spd_set_notification(
      connection,
      notification,
      state,
    );
  }

  late final _spd_set_notificationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('spd_set_notification');
  late final _spd_set_notification = _spd_set_notificationPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Char>)>();

  int spd_set_voice_rate(
    ffi.Pointer<SPDConnection> connection,
    int rate,
  ) {
    return _spd_set_voice_rate(
      connection,
      rate,
    );
  }

  late final _spd_set_voice_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_voice_rate');
  late final _spd_set_voice_rate = _spd_set_voice_ratePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_rate_all(
    ffi.Pointer<SPDConnection> connection,
    int rate,
  ) {
    return _spd_set_voice_rate_all(
      connection,
      rate,
    );
  }

  late final _spd_set_voice_rate_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_voice_rate_all');
  late final _spd_set_voice_rate_all = _spd_set_voice_rate_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_rate_uid(
    ffi.Pointer<SPDConnection> connection,
    int rate,
    int uid,
  ) {
    return _spd_set_voice_rate_uid(
      connection,
      rate,
      uid,
    );
  }

  late final _spd_set_voice_rate_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int,
              ffi.UnsignedInt)>>('spd_set_voice_rate_uid');
  late final _spd_set_voice_rate_uid = _spd_set_voice_rate_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_get_voice_rate(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_voice_rate(
      connection,
    );
  }

  late final _spd_get_voice_ratePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_get_voice_rate');
  late final _spd_get_voice_rate = _spd_get_voice_ratePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_set_voice_pitch(
    ffi.Pointer<SPDConnection> connection,
    int pitch,
  ) {
    return _spd_set_voice_pitch(
      connection,
      pitch,
    );
  }

  late final _spd_set_voice_pitchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_voice_pitch');
  late final _spd_set_voice_pitch = _spd_set_voice_pitchPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_pitch_all(
    ffi.Pointer<SPDConnection> connection,
    int pitch,
  ) {
    return _spd_set_voice_pitch_all(
      connection,
      pitch,
    );
  }

  late final _spd_set_voice_pitch_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_voice_pitch_all');
  late final _spd_set_voice_pitch_all = _spd_set_voice_pitch_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_pitch_uid(
    ffi.Pointer<SPDConnection> connection,
    int pitch,
    int uid,
  ) {
    return _spd_set_voice_pitch_uid(
      connection,
      pitch,
      uid,
    );
  }

  late final _spd_set_voice_pitch_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int,
              ffi.UnsignedInt)>>('spd_set_voice_pitch_uid');
  late final _spd_set_voice_pitch_uid = _spd_set_voice_pitch_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_get_voice_pitch(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_voice_pitch(
      connection,
    );
  }

  late final _spd_get_voice_pitchPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_get_voice_pitch');
  late final _spd_get_voice_pitch = _spd_get_voice_pitchPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_set_voice_pitch_range(
    ffi.Pointer<SPDConnection> connection,
    int pitch_range,
  ) {
    return _spd_set_voice_pitch_range(
      connection,
      pitch_range,
    );
  }

  late final _spd_set_voice_pitch_rangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int)>>('spd_set_voice_pitch_range');
  late final _spd_set_voice_pitch_range = _spd_set_voice_pitch_rangePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_pitch_range_all(
    ffi.Pointer<SPDConnection> connection,
    int pitch_range,
  ) {
    return _spd_set_voice_pitch_range_all(
      connection,
      pitch_range,
    );
  }

  late final _spd_set_voice_pitch_range_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int)>>('spd_set_voice_pitch_range_all');
  late final _spd_set_voice_pitch_range_all = _spd_set_voice_pitch_range_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_voice_pitch_range_uid(
    ffi.Pointer<SPDConnection> connection,
    int pitch_range,
    int uid,
  ) {
    return _spd_set_voice_pitch_range_uid(
      connection,
      pitch_range,
      uid,
    );
  }

  late final _spd_set_voice_pitch_range_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int,
              ffi.UnsignedInt)>>('spd_set_voice_pitch_range_uid');
  late final _spd_set_voice_pitch_range_uid = _spd_set_voice_pitch_range_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_set_volume(
    ffi.Pointer<SPDConnection> connection,
    int volume,
  ) {
    return _spd_set_volume(
      connection,
      volume,
    );
  }

  late final _spd_set_volumePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_volume');
  late final _spd_set_volume = _spd_set_volumePtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_volume_all(
    ffi.Pointer<SPDConnection> connection,
    int volume,
  ) {
    return _spd_set_volume_all(
      connection,
      volume,
    );
  }

  late final _spd_set_volume_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int)>>('spd_set_volume_all');
  late final _spd_set_volume_all = _spd_set_volume_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_volume_uid(
    ffi.Pointer<SPDConnection> connection,
    int volume,
    int uid,
  ) {
    return _spd_set_volume_uid(
      connection,
      volume,
      uid,
    );
  }

  late final _spd_set_volume_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int,
              ffi.UnsignedInt)>>('spd_set_volume_uid');
  late final _spd_set_volume_uid = _spd_set_volume_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_get_volume(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_volume(
      connection,
    );
  }

  late final _spd_get_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>(
          'spd_get_volume');
  late final _spd_get_volume =
      _spd_get_volumePtr.asFunction<int Function(ffi.Pointer<SPDConnection>)>();

  int spd_set_punctuation(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_punctuation(
      connection,
      type,
    );
  }

  late final _spd_set_punctuationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32)>>('spd_set_punctuation');
  late final _spd_set_punctuation = _spd_set_punctuationPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_punctuation_all(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_punctuation_all(
      connection,
      type,
    );
  }

  late final _spd_set_punctuation_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_punctuation_all');
  late final _spd_set_punctuation_all = _spd_set_punctuation_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_punctuation_uid(
    ffi.Pointer<SPDConnection> connection,
    int type,
    int uid,
  ) {
    return _spd_set_punctuation_uid(
      connection,
      type,
      uid,
    );
  }

  late final _spd_set_punctuation_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.UnsignedInt)>>('spd_set_punctuation_uid');
  late final _spd_set_punctuation_uid = _spd_set_punctuation_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_set_capital_letters(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_capital_letters(
      connection,
      type,
    );
  }

  late final _spd_set_capital_lettersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_capital_letters');
  late final _spd_set_capital_letters = _spd_set_capital_lettersPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_capital_letters_all(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_capital_letters_all(
      connection,
      type,
    );
  }

  late final _spd_set_capital_letters_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Int32)>>('spd_set_capital_letters_all');
  late final _spd_set_capital_letters_all = _spd_set_capital_letters_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_capital_letters_uid(
    ffi.Pointer<SPDConnection> connection,
    int type,
    int uid,
  ) {
    return _spd_set_capital_letters_uid(
      connection,
      type,
      uid,
    );
  }

  late final _spd_set_capital_letters_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.UnsignedInt)>>('spd_set_capital_letters_uid');
  late final _spd_set_capital_letters_uid = _spd_set_capital_letters_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_set_spelling(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_spelling(
      connection,
      type,
    );
  }

  late final _spd_set_spellingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32)>>('spd_set_spelling');
  late final _spd_set_spelling = _spd_set_spellingPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_spelling_all(
    ffi.Pointer<SPDConnection> connection,
    int type,
  ) {
    return _spd_set_spelling_all(
      connection,
      type,
    );
  }

  late final _spd_set_spelling_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>, ffi.Int32)>>('spd_set_spelling_all');
  late final _spd_set_spelling_all = _spd_set_spelling_allPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int)>();

  int spd_set_spelling_uid(
    ffi.Pointer<SPDConnection> connection,
    int type,
    int uid,
  ) {
    return _spd_set_spelling_uid(
      connection,
      type,
      uid,
    );
  }

  late final _spd_set_spelling_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.UnsignedInt)>>('spd_set_spelling_uid');
  late final _spd_set_spelling_uid = _spd_set_spelling_uidPtr
      .asFunction<int Function(ffi.Pointer<SPDConnection>, int, int)>();

  int spd_set_language(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> language,
  ) {
    return _spd_set_language(
      connection,
      language,
    );
  }

  late final _spd_set_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_language');
  late final _spd_set_language = _spd_set_languagePtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_language_all(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> language,
  ) {
    return _spd_set_language_all(
      connection,
      language,
    );
  }

  late final _spd_set_language_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_language_all');
  late final _spd_set_language_all = _spd_set_language_allPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_language_uid(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> language,
    int uid,
  ) {
    return _spd_set_language_uid(
      connection,
      language,
      uid,
    );
  }

  late final _spd_set_language_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('spd_set_language_uid');
  late final _spd_set_language_uid = _spd_set_language_uidPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> spd_get_language(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_language(
      connection,
    );
  }

  late final _spd_get_languagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SPDConnection>)>>('spd_get_language');
  late final _spd_get_language = _spd_get_languagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>)>();

  int spd_set_output_module(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> output_module,
  ) {
    return _spd_set_output_module(
      connection,
      output_module,
    );
  }

  late final _spd_set_output_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_output_module');
  late final _spd_set_output_module = _spd_set_output_modulePtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_output_module_all(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> output_module,
  ) {
    return _spd_set_output_module_all(
      connection,
      output_module,
    );
  }

  late final _spd_set_output_module_allPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_set_output_module_all');
  late final _spd_set_output_module_all =
      _spd_set_output_module_allPtr.asFunction<
          int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_set_output_module_uid(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> output_module,
    int uid,
  ) {
    return _spd_set_output_module_uid(
      connection,
      output_module,
      uid,
    );
  }

  late final _spd_set_output_module_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>>('spd_set_output_module_uid');
  late final _spd_set_output_module_uid =
      _spd_set_output_module_uidPtr.asFunction<
          int Function(
              ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, int)>();

  int spd_get_client_list(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Pointer<ffi.Char>> client_names,
    ffi.Pointer<ffi.Int> client_ids,
    ffi.Pointer<ffi.Int> active,
  ) {
    return _spd_get_client_list(
      connection,
      client_names,
      client_ids,
      active,
    );
  }

  late final _spd_get_client_listPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>>('spd_get_client_list');
  late final _spd_get_client_list = _spd_get_client_listPtr.asFunction<
      int Function(
          ffi.Pointer<SPDConnection>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Int>)>();

  int spd_get_message_list_fd(
    ffi.Pointer<SPDConnection> connection,
    int target,
    ffi.Pointer<ffi.Int> msg_ids,
    ffi.Pointer<ffi.Pointer<ffi.Char>> client_names,
  ) {
    return _spd_get_message_list_fd(
      connection,
      target,
      msg_ids,
      client_names,
    );
  }

  late final _spd_get_message_list_fdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>,
              ffi.Int,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('spd_get_message_list_fd');
  late final _spd_get_message_list_fd = _spd_get_message_list_fdPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, int, ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> spd_list_modules(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_list_modules(
      connection,
    );
  }

  late final _spd_list_modulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>)>>('spd_list_modules');
  late final _spd_list_modules = _spd_list_modulesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<SPDConnection>)>();

  void free_spd_modules(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _free_spd_modules(
      arg0,
    );
  }

  late final _free_spd_modulesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('free_spd_modules');
  late final _free_spd_modules = _free_spd_modulesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> spd_get_output_module(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_get_output_module(
      connection,
    );
  }

  late final _spd_get_output_modulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<SPDConnection>)>>('spd_get_output_module');
  late final _spd_get_output_module = _spd_get_output_modulePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> spd_list_voices(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_list_voices(
      connection,
    );
  }

  late final _spd_list_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>)>>('spd_list_voices');
  late final _spd_list_voices = _spd_list_voicesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<SPDConnection>)>();

  void free_spd_symbolic_voices(
    ffi.Pointer<ffi.Pointer<ffi.Char>> voices,
  ) {
    return _free_spd_symbolic_voices(
      voices,
    );
  }

  late final _free_spd_symbolic_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('free_spd_symbolic_voices');
  late final _free_spd_symbolic_voices = _free_spd_symbolic_voicesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<SPDVoice>> spd_list_synthesis_voices(
    ffi.Pointer<SPDConnection> connection,
  ) {
    return _spd_list_synthesis_voices(
      connection,
    );
  }

  late final _spd_list_synthesis_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<SPDVoice>> Function(
              ffi.Pointer<SPDConnection>)>>('spd_list_synthesis_voices');
  late final _spd_list_synthesis_voices =
      _spd_list_synthesis_voicesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<SPDVoice>> Function(
              ffi.Pointer<SPDConnection>)>();

  void free_spd_voices(
    ffi.Pointer<ffi.Pointer<SPDVoice>> voices,
  ) {
    return _free_spd_voices(
      voices,
    );
  }

  late final _free_spd_voicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<SPDVoice>>)>>('free_spd_voices');
  late final _free_spd_voices = _free_spd_voicesPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<SPDVoice>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> spd_execute_command_with_list_reply(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> command,
  ) {
    return _spd_execute_command_with_list_reply(
      connection,
      command,
    );
  }

  late final _spd_execute_command_with_list_replyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_execute_command_with_list_reply');
  late final _spd_execute_command_with_list_reply =
      _spd_execute_command_with_list_replyPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_execute_command(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> command,
  ) {
    return _spd_execute_command(
      connection,
      command,
    );
  }

  late final _spd_execute_commandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_execute_command');
  late final _spd_execute_command = _spd_execute_commandPtr.asFunction<
      int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  int spd_execute_command_with_reply(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> command,
    ffi.Pointer<ffi.Pointer<ffi.Char>> reply,
  ) {
    return _spd_execute_command_with_reply(
      connection,
      command,
      reply,
    );
  }

  late final _spd_execute_command_with_replyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'spd_execute_command_with_reply');
  late final _spd_execute_command_with_reply =
      _spd_execute_command_with_replyPtr.asFunction<
          int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int spd_execute_command_wo_mutex(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> command,
  ) {
    return _spd_execute_command_wo_mutex(
      connection,
      command,
    );
  }

  late final _spd_execute_command_wo_mutexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>)>>('spd_execute_command_wo_mutex');
  late final _spd_execute_command_wo_mutex =
      _spd_execute_command_wo_mutexPtr.asFunction<
          int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> spd_send_data(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> message,
    int wfr,
  ) {
    return _spd_send_data(
      connection,
      message,
      wfr,
    );
  }

  late final _spd_send_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('spd_send_data');
  late final _spd_send_data = _spd_send_dataPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> spd_send_data_wo_mutex(
    ffi.Pointer<SPDConnection> connection,
    ffi.Pointer<ffi.Char> message,
    int wfr,
  ) {
    return _spd_send_data_wo_mutex(
      connection,
      message,
      wfr,
    );
  }

  late final _spd_send_data_wo_mutexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('spd_send_data_wo_mutex');
  late final _spd_send_data_wo_mutex = _spd_send_data_wo_mutexPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, int)>();

  late final addresses = _SymbolAddresses(this);
}

class _SymbolAddresses {
  final Speechd _library;
  _SymbolAddresses(this._library);
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get remove => _library._removePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get rename => _library._renamePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Pointer<ffi.Char>)>> get renameat => _library._renameatPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fclose => _library._fclosePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<FILE> Function()>> get tmpfile =>
      _library._tmpfilePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get tmpnam =>
      _library._tmpnamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>
      get tmpnam_r => _library._tmpnam_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get tempnam =>
      _library._tempnamPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fflush => _library._fflushPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fflush_unlocked => _library._fflush_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get fopen =>
      _library._fopenPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>> get freopen => _library._freopenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get fdopen => _library._fdopenPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>,
              cookie_io_functions_t)>> get fopencookie =>
      _library._fopencookiePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(
                  ffi.Pointer<ffi.Void>, ffi.Size, ffi.Pointer<ffi.Char>)>>
      get fmemopen => _library._fmemopenPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<FILE> Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>)>>
      get open_memstream => _library._open_memstreamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get setbuf => _library._setbufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int, ffi.Size)>>
      get setvbuf => _library._setvbufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Size)>>
      get setbuffer => _library._setbufferPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get setlinebuf => _library._setlinebufPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get fprintf => _library._fprintfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get printf => _library._printfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get sprintf => _library._sprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vfprintf =>
      _library._vfprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>
      get vprintf => _library._vprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsprintf =>
      _library._vsprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<ffi.Char>)>>
      get snprintf => _library._snprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsnprintf =>
      _library._vsnprintfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vasprintf =>
      _library._vasprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>>
      get __asprintf => _library.___asprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>>
      get asprintf => _library._asprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Int, ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>>
      get vdprintf => _library._vdprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Char>)>>
      get dprintf => _library._dprintfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>
      get fscanf => _library._fscanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get scanf => _library._scanfPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      get sscanf => _library._sscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vfscanf => _library._vfscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>> get vscanf =>
      _library._vscanfPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>> get vsscanf => _library._vsscanfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fgetc => _library._fgetcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getc => _library._getcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getchar =>
      _library._getcharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getc_unlocked => _library._getc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get getchar_unlocked =>
      _library._getchar_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fgetc_unlocked => _library._fgetc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get fputc => _library._fputcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putc => _library._putcPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get putchar =>
      _library._putcharPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get fputc_unlocked => _library._fputc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putc_unlocked => _library._putc_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get putchar_unlocked => _library._putchar_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get getw => _library._getwPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get putw => _library._putwPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>> get fgets =>
      _library._fgetsPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>> get __getdelim => _library.___getdelimPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Int,
              ffi.Pointer<FILE>)>> get getdelim => _library._getdelimPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          __ssize_t Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<FILE>)>> get getline => _library._getlinePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>
      get fputs => _library._fputsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>
      get puts => _library._putsPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>
      get ungetc => _library._ungetcPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fread => _library._freadPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fwrite => _library._fwritePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fread_unlocked =>
      _library._fread_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>> get fwrite_unlocked =>
      _library._fwrite_unlockedPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>> get fseek =>
      _library._fseekPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>
      get ftell => _library._ftellPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get rewind => _library._rewindPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, __off_t, ffi.Int)>> get fseeko =>
      _library._fseekoPtr;
  ffi.Pointer<ffi.NativeFunction<__off_t Function(ffi.Pointer<FILE>)>>
      get ftello => _library._ftelloPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>
      get fgetpos => _library._fgetposPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>
      get fsetpos => _library._fsetposPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get clearerr => _library._clearerrPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get feof => _library._feofPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ferror => _library._ferrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get clearerr_unlocked => _library._clearerr_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get feof_unlocked => _library._feof_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ferror_unlocked => _library._ferror_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>
      get perror => _library._perrorPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fileno => _library._filenoPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get fileno_unlocked => _library._fileno_unlockedPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get pclose => _library._pclosePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>> get popen =>
      _library._popenPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>> get ctermid =>
      _library._ctermidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get flockfile => _library._flockfilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get ftrylockfile => _library._ftrylockfilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>
      get funlockfile => _library._funlockfilePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>
      get __uflow => _library.___uflowPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>, ffi.Int)>>
      get __overflow => _library.___overflowPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Size, ffi.Pointer<cpu_set_t>)>>
      get __sched_cpucount => _library.___sched_cpucountPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<cpu_set_t> Function(ffi.Size)>>
      get __sched_cpualloc => _library.___sched_cpuallocPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<cpu_set_t>)>>
      get __sched_cpufree => _library.___sched_cpufreePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>
      get sched_setparam => _library._sched_setparamPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<sched_param>)>>
      get sched_getparam => _library._sched_getparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(__pid_t, ffi.Int, ffi.Pointer<sched_param>)>>
      get sched_setscheduler => _library._sched_setschedulerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(__pid_t)>>
      get sched_getscheduler => _library._sched_getschedulerPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get sched_yield =>
      _library._sched_yieldPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get sched_get_priority_max => _library._sched_get_priority_maxPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>
      get sched_get_priority_min => _library._sched_get_priority_minPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(__pid_t, ffi.Pointer<timespec>)>>
      get sched_rr_get_interval => _library._sched_rr_get_intervalPtr;
  ffi.Pointer<ffi.NativeFunction<clock_t Function()>> get clock =>
      _library._clockPtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<time_t>)>>
      get time => _library._timePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Double Function(time_t, time_t)>>
      get difftime => _library._difftimePtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get mktime => _library._mktimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>)>> get strftime => _library._strftimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>,
              locale_t)>> get strftime_l => _library._strftime_lPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>
      get gmtime => _library._gmtimePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<tm> Function(ffi.Pointer<time_t>)>>
      get localtime => _library._localtimePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>>
      get gmtime_r => _library._gmtime_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<tm> Function(ffi.Pointer<time_t>, ffi.Pointer<tm>)>>
      get localtime_r => _library._localtime_rPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>
      get asctime => _library._asctimePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<time_t>)>>
      get ctime => _library._ctimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<tm>, ffi.Pointer<ffi.Char>)>> get asctime_r =>
      _library._asctime_rPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<time_t>, ffi.Pointer<ffi.Char>)>> get ctime_r =>
      _library._ctime_rPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get tzset =>
      _library._tzsetPtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get timegm => _library._timegmPtr;
  ffi.Pointer<ffi.NativeFunction<time_t Function(ffi.Pointer<tm>)>>
      get timelocal => _library._timelocalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Int)>> get dysize =>
      _library._dysizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<timespec>, ffi.Pointer<timespec>)>>
      get nanosleep => _library._nanosleepPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_getres => _library._clock_getresPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_gettime => _library._clock_gettimePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(clockid_t, ffi.Pointer<timespec>)>>
      get clock_settime => _library._clock_settimePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(clockid_t, ffi.Int, ffi.Pointer<timespec>,
              ffi.Pointer<timespec>)>> get clock_nanosleep =>
      _library._clock_nanosleepPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(pid_t, ffi.Pointer<clockid_t>)>>
      get clock_getcpuclockid => _library._clock_getcpuclockidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  clockid_t, ffi.Pointer<sigevent>, ffi.Pointer<timer_t>)>>
      get timer_create => _library._timer_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(timer_t)>> get timer_delete =>
      _library._timer_deletePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(timer_t, ffi.Int, ffi.Pointer<itimerspec>,
              ffi.Pointer<itimerspec>)>> get timer_settime =>
      _library._timer_settimePtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(timer_t, ffi.Pointer<itimerspec>)>>
      get timer_gettime => _library._timer_gettimePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(timer_t)>>
      get timer_getoverrun => _library._timer_getoverrunPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<timespec>, ffi.Int)>>
      get timespec_get => _library._timespec_getPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_t>,
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>> get pthread_create =>
      _library._pthread_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      get pthread_exit => _library._pthread_exitPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_t, ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get pthread_join => _library._pthread_joinPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t)>>
      get pthread_detach => _library._pthread_detachPtr;
  ffi.Pointer<ffi.NativeFunction<pthread_t Function()>> get pthread_self =>
      _library._pthread_selfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t, pthread_t)>>
      get pthread_equal => _library._pthread_equalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>
      get pthread_attr_init => _library._pthread_attr_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_attr_t>)>>
      get pthread_attr_destroy => _library._pthread_attr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getdetachstate =>
          _library._pthread_attr_getdetachstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setdetachstate =>
          _library._pthread_attr_setdetachstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>>
      get pthread_attr_getguardsize => _library._pthread_attr_getguardsizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>>
      get pthread_attr_setguardsize => _library._pthread_attr_setguardsizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>>
      get pthread_attr_getschedparam => _library._pthread_attr_getschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<sched_param>)>>
      get pthread_attr_setschedparam => _library._pthread_attr_setschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getschedpolicy =>
          _library._pthread_attr_getschedpolicyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setschedpolicy =>
          _library._pthread_attr_setschedpolicyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getinheritsched =>
          _library._pthread_attr_getinheritschedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setinheritsched =>
          _library._pthread_attr_setinheritschedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_attr_getscope => _library._pthread_attr_getscopePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Int)>>
      get pthread_attr_setscope => _library._pthread_attr_setscopePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>,
                  ffi.Pointer<ffi.Pointer<ffi.Void>>)>>
      get pthread_attr_getstackaddr => _library._pthread_attr_getstackaddrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>)>>
      get pthread_attr_setstackaddr => _library._pthread_attr_setstackaddrPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Size>)>>
      get pthread_attr_getstacksize => _library._pthread_attr_getstacksizePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Size)>>
      get pthread_attr_setstacksize => _library._pthread_attr_setstacksizePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_attr_t>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Size>)>> get pthread_attr_getstack =>
      _library._pthread_attr_getstackPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_attr_t>, ffi.Pointer<ffi.Void>,
              ffi.Size)>> get pthread_attr_setstack =>
      _library._pthread_attr_setstackPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_t, ffi.Int, ffi.Pointer<sched_param>)>>
      get pthread_setschedparam => _library._pthread_setschedparamPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  pthread_t, ffi.Pointer<ffi.Int>, ffi.Pointer<sched_param>)>>
      get pthread_getschedparam => _library._pthread_getschedparamPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t, ffi.Int)>>
      get pthread_setschedprio => _library._pthread_setschedprioPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_once_t>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get pthread_once => _library._pthread_oncePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_setcancelstate => _library._pthread_setcancelstatePtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_setcanceltype => _library._pthread_setcanceltypePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_t)>>
      get pthread_cancel => _library._pthread_cancelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> get pthread_testcancel =>
      _library._pthread_testcancelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>
      get __pthread_register_cancel => _library.___pthread_register_cancelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>
      get __pthread_unregister_cancel =>
          _library.___pthread_unregister_cancelPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<__pthread_unwind_buf_t>)>>
      get __pthread_unwind_next => _library.___pthread_unwind_nextPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<__jmp_buf_tag>, ffi.Int)>>
      get __sigsetjmp => _library.___sigsetjmpPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<pthread_mutexattr_t>)>> get pthread_mutex_init =>
      _library._pthread_mutex_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_destroy => _library._pthread_mutex_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_trylock => _library._pthread_mutex_trylockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_lock => _library._pthread_mutex_lockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Pointer<timespec>)>>
      get pthread_mutex_timedlock => _library._pthread_mutex_timedlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_unlock => _library._pthread_mutex_unlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutex_getprioceiling =>
          _library._pthread_mutex_getprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutex_t>, ffi.Int, ffi.Pointer<ffi.Int>)>>
      get pthread_mutex_setprioceiling =>
          _library._pthread_mutex_setprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutex_t>)>>
      get pthread_mutex_consistent => _library._pthread_mutex_consistentPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>
      get pthread_mutexattr_init => _library._pthread_mutexattr_initPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>)>>
      get pthread_mutexattr_destroy => _library._pthread_mutexattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getpshared =>
          _library._pthread_mutexattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setpshared =>
          _library._pthread_mutexattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_gettype => _library._pthread_mutexattr_gettypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_settype => _library._pthread_mutexattr_settypePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getprotocol =>
          _library._pthread_mutexattr_getprotocolPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setprotocol =>
          _library._pthread_mutexattr_setprotocolPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getprioceiling =>
          _library._pthread_mutexattr_getprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setprioceiling =>
          _library._pthread_mutexattr_setprioceilingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_mutexattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_mutexattr_getrobust =>
          _library._pthread_mutexattr_getrobustPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_mutexattr_t>, ffi.Int)>>
      get pthread_mutexattr_setrobust =>
          _library._pthread_mutexattr_setrobustPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_rwlock_t>,
              ffi.Pointer<pthread_rwlockattr_t>)>> get pthread_rwlock_init =>
      _library._pthread_rwlock_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_destroy => _library._pthread_rwlock_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_rdlock => _library._pthread_rwlock_rdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_tryrdlock => _library._pthread_rwlock_tryrdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>>
      get pthread_rwlock_timedrdlock => _library._pthread_rwlock_timedrdlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_wrlock => _library._pthread_rwlock_wrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_trywrlock => _library._pthread_rwlock_trywrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlock_t>, ffi.Pointer<timespec>)>>
      get pthread_rwlock_timedwrlock => _library._pthread_rwlock_timedwrlockPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlock_t>)>>
      get pthread_rwlock_unlock => _library._pthread_rwlock_unlockPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>
      get pthread_rwlockattr_init => _library._pthread_rwlockattr_initPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>)>>
      get pthread_rwlockattr_destroy => _library._pthread_rwlockattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_rwlockattr_getpshared =>
          _library._pthread_rwlockattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>>
      get pthread_rwlockattr_setpshared =>
          _library._pthread_rwlockattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_rwlockattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_rwlockattr_getkind_np =>
          _library._pthread_rwlockattr_getkind_npPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_rwlockattr_t>, ffi.Int)>>
      get pthread_rwlockattr_setkind_np =>
          _library._pthread_rwlockattr_setkind_npPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_condattr_t>)>> get pthread_cond_init =>
      _library._pthread_cond_initPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_destroy => _library._pthread_cond_destroyPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_signal => _library._pthread_cond_signalPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_cond_t>)>>
      get pthread_cond_broadcast => _library._pthread_cond_broadcastPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_cond_t>, ffi.Pointer<pthread_mutex_t>)>>
      get pthread_cond_wait => _library._pthread_cond_waitPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_cond_t>,
              ffi.Pointer<pthread_mutex_t>,
              ffi.Pointer<timespec>)>> get pthread_cond_timedwait =>
      _library._pthread_cond_timedwaitPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>
      get pthread_condattr_init => _library._pthread_condattr_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_condattr_t>)>>
      get pthread_condattr_destroy => _library._pthread_condattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_condattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_condattr_getpshared =>
          _library._pthread_condattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_condattr_t>, ffi.Int)>>
      get pthread_condattr_setpshared =>
          _library._pthread_condattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_condattr_t>, ffi.Pointer<__clockid_t>)>>
      get pthread_condattr_getclock => _library._pthread_condattr_getclockPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_condattr_t>, __clockid_t)>>
      get pthread_condattr_setclock => _library._pthread_condattr_setclockPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<pthread_barrier_t>,
              ffi.Pointer<pthread_barrierattr_t>,
              ffi.UnsignedInt)>> get pthread_barrier_init =>
      _library._pthread_barrier_initPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>
      get pthread_barrier_destroy => _library._pthread_barrier_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrier_t>)>>
      get pthread_barrier_wait => _library._pthread_barrier_waitPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>
      get pthread_barrierattr_init => _library._pthread_barrierattr_initPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>)>>
      get pthread_barrierattr_destroy =>
          _library._pthread_barrierattr_destroyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_barrierattr_t>, ffi.Pointer<ffi.Int>)>>
      get pthread_barrierattr_getpshared =>
          _library._pthread_barrierattr_getpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<pthread_barrierattr_t>, ffi.Int)>>
      get pthread_barrierattr_setpshared =>
          _library._pthread_barrierattr_setpsharedPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<pthread_key_t>,
                  ffi.Pointer<
                      ffi.NativeFunction<
                          ffi.Void Function(ffi.Pointer<ffi.Void>)>>)>>
      get pthread_key_create => _library._pthread_key_createPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(pthread_key_t)>>
      get pthread_key_delete => _library._pthread_key_deletePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(pthread_key_t)>>
      get pthread_getspecific => _library._pthread_getspecificPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_key_t, ffi.Pointer<ffi.Void>)>>
      get pthread_setspecific => _library._pthread_setspecificPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(pthread_t, ffi.Pointer<__clockid_t>)>>
      get pthread_getcpuclockid => _library._pthread_getcpuclockidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>,
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>
      get pthread_atfork => _library._pthread_atforkPtr;
  ffi.Pointer<
          ffi
          .NativeFunction<ffi.Void Function(ffi.Pointer<SPDConnectionAddress>)>>
      get SPDConnectionAddress__free => _library._SPDConnectionAddress__freePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<SPDConnectionAddress> Function(
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get spd_get_default_address => _library._spd_get_default_addressPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<SPDConnection> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32)>> get spd_open => _library._spd_openPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<SPDConnection> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<SPDConnectionAddress>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>> get spd_open2 =>
      _library._spd_open2Ptr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_client_id => _library._spd_get_client_idPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SPDConnection>)>>
      get spd_close => _library._spd_closePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_say => _library._spd_sayPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_sayf => _library._spd_sayfPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_stop => _library._spd_stopPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_stop_all => _library._spd_stop_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_stop_uid => _library._spd_stop_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_cancel => _library._spd_cancelPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_cancel_all => _library._spd_cancel_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_cancel_uid => _library._spd_cancel_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_pause => _library._spd_pausePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_pause_all => _library._spd_pause_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_pause_uid => _library._spd_pause_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_resume => _library._spd_resumePtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_resume_all => _library._spd_resume_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_resume_uid => _library._spd_resume_uidPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_key => _library._spd_keyPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_char => _library._spd_charPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int32, ffi.WChar)>>
      get spd_wchar => _library._spd_wcharPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_sound_icon =>
      _library._spd_sound_iconPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_voice_type => _library._spd_set_voice_typePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_voice_type_all => _library._spd_set_voice_type_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int32, ffi.UnsignedInt)>>
      get spd_set_voice_type_uid => _library._spd_set_voice_type_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_voice_type => _library._spd_get_voice_typePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_synthesis_voice => _library._spd_set_synthesis_voicePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_synthesis_voice_all =>
          _library._spd_set_synthesis_voice_allPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>> get spd_set_synthesis_voice_uid =>
      _library._spd_set_synthesis_voice_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_data_mode => _library._spd_set_data_modePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_notification_on => _library._spd_set_notification_onPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_notification_off => _library._spd_set_notification_offPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>> get spd_set_notification =>
      _library._spd_set_notificationPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_rate => _library._spd_set_voice_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_rate_all => _library._spd_set_voice_rate_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int, ffi.UnsignedInt)>>
      get spd_set_voice_rate_uid => _library._spd_set_voice_rate_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_voice_rate => _library._spd_get_voice_ratePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_pitch => _library._spd_set_voice_pitchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_pitch_all => _library._spd_set_voice_pitch_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int, ffi.UnsignedInt)>>
      get spd_set_voice_pitch_uid => _library._spd_set_voice_pitch_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_voice_pitch => _library._spd_get_voice_pitchPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_pitch_range => _library._spd_set_voice_pitch_rangePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_voice_pitch_range_all =>
          _library._spd_set_voice_pitch_range_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int, ffi.UnsignedInt)>>
      get spd_set_voice_pitch_range_uid =>
          _library._spd_set_voice_pitch_range_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_volume => _library._spd_set_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int)>>
      get spd_set_volume_all => _library._spd_set_volume_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int, ffi.UnsignedInt)>>
      get spd_set_volume_uid => _library._spd_set_volume_uidPtr;
  ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_volume => _library._spd_get_volumePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_punctuation => _library._spd_set_punctuationPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_punctuation_all => _library._spd_set_punctuation_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int32, ffi.UnsignedInt)>>
      get spd_set_punctuation_uid => _library._spd_set_punctuation_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_capital_letters => _library._spd_set_capital_lettersPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_capital_letters_all =>
          _library._spd_set_capital_letters_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int32, ffi.UnsignedInt)>>
      get spd_set_capital_letters_uid =>
          _library._spd_set_capital_letters_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_spelling => _library._spd_set_spellingPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int32)>>
      get spd_set_spelling_all => _library._spd_set_spelling_allPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Int32, ffi.UnsignedInt)>>
      get spd_set_spelling_uid => _library._spd_set_spelling_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_language => _library._spd_set_languagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_language_all => _library._spd_set_language_allPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>> get spd_set_language_uid =>
      _library._spd_set_language_uidPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_language => _library._spd_get_languagePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_output_module => _library._spd_set_output_modulePtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_set_output_module_all => _library._spd_set_output_module_allPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>,
              ffi.UnsignedInt)>> get spd_set_output_module_uid =>
      _library._spd_set_output_module_uidPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<SPDConnection>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Int>)>> get spd_get_client_list =>
      _library._spd_get_client_listPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>, ffi.Int,
                  ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get spd_get_message_list_fd => _library._spd_get_message_list_fdPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>)>> get spd_list_modules =>
      _library._spd_list_modulesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get free_spd_modules => _library._free_spd_modulesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(ffi.Pointer<SPDConnection>)>>
      get spd_get_output_module => _library._spd_get_output_modulePtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<SPDConnection>)>> get spd_list_voices =>
      _library._spd_list_voicesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get free_spd_symbolic_voices => _library._free_spd_symbolic_voicesPtr;
  ffi.Pointer<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<SPDVoice>> Function(
              ffi.Pointer<SPDConnection>)>> get spd_list_synthesis_voices =>
      _library._spd_list_synthesis_voicesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<SPDVoice>>)>>
      get free_spd_voices => _library._free_spd_voicesPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_execute_command_with_list_reply =>
          _library._spd_execute_command_with_list_replyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_execute_command => _library._spd_execute_commandPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<SPDConnection>,
                  ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>
      get spd_execute_command_with_reply =>
          _library._spd_execute_command_with_replyPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>)>>
      get spd_execute_command_wo_mutex =>
          _library._spd_execute_command_wo_mutexPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get spd_send_data => _library._spd_send_dataPtr;
  ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<ffi.Char> Function(
                  ffi.Pointer<SPDConnection>, ffi.Pointer<ffi.Char>, ffi.Int)>>
      get spd_send_data_wo_mutex => _library._spd_send_data_wo_mutexPtr;
}

final class __fsid_t extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Int> __val;
}

final class __mbstate_t extends ffi.Struct {
  @ffi.Int()
  external int __count;

  external UnnamedUnion1 __value;
}

final class UnnamedUnion1 extends ffi.Union {
  @ffi.UnsignedInt()
  external int __wch;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __wchb;
}

final class _G_fpos_t extends ffi.Struct {
  @__off_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off_t = ffi.Long;
typedef Dart__off_t = int;

final class _G_fpos64_t extends ffi.Struct {
  @__off64_t()
  external int __pos;

  external __mbstate_t __state;
}

typedef __off64_t = ffi.Long;
typedef Dart__off64_t = int;

final class _IO_FILE extends ffi.Struct {
  @ffi.Int()
  external int _flags;

  external ffi.Pointer<ffi.Char> _IO_read_ptr;

  external ffi.Pointer<ffi.Char> _IO_read_end;

  external ffi.Pointer<ffi.Char> _IO_read_base;

  external ffi.Pointer<ffi.Char> _IO_write_base;

  external ffi.Pointer<ffi.Char> _IO_write_ptr;

  external ffi.Pointer<ffi.Char> _IO_write_end;

  external ffi.Pointer<ffi.Char> _IO_buf_base;

  external ffi.Pointer<ffi.Char> _IO_buf_end;

  external ffi.Pointer<ffi.Char> _IO_save_base;

  external ffi.Pointer<ffi.Char> _IO_backup_base;

  external ffi.Pointer<ffi.Char> _IO_save_end;

  external ffi.Pointer<_IO_marker> _markers;

  external ffi.Pointer<_IO_FILE> _chain;

  @ffi.Int()
  external int _fileno;

  @ffi.Int()
  external int _flags2;

  @__off_t()
  external int _old_offset;

  @ffi.UnsignedShort()
  external int _cur_column;

  @ffi.SignedChar()
  external int _vtable_offset;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> _shortbuf;

  external ffi.Pointer<_IO_lock_t> _lock;

  @__off64_t()
  external int _offset;

  external ffi.Pointer<_IO_codecvt> _codecvt;

  external ffi.Pointer<_IO_wide_data> _wide_data;

  external ffi.Pointer<_IO_FILE> _freeres_list;

  external ffi.Pointer<ffi.Void> _freeres_buf;

  @ffi.Size()
  external int __pad5;

  @ffi.Int()
  external int _mode;

  @ffi.Array.multi([20])
  external ffi.Array<ffi.Char> _unused2;
}

final class _IO_marker extends ffi.Opaque {}

typedef _IO_lock_t = ffi.Void;
typedef Dart_IO_lock_t = void;

final class _IO_codecvt extends ffi.Opaque {}

final class _IO_wide_data extends ffi.Opaque {}

final class _IO_cookie_io_functions_t extends ffi.Struct {
  external ffi.Pointer<cookie_read_function_t> read;

  external ffi.Pointer<cookie_write_function_t> write;

  external ffi.Pointer<cookie_seek_function_t> seek;

  external ffi.Pointer<cookie_close_function_t> close;
}

typedef cookie_read_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef __ssize_t = ffi.Long;
typedef Dart__ssize_t = int;
typedef cookie_write_function_t = ffi.NativeFunction<
    __ssize_t Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<ffi.Char> __buf, ffi.Size __nbytes)>;
typedef cookie_seek_function_t = ffi.NativeFunction<
    ffi.Int Function(ffi.Pointer<ffi.Void> __cookie,
        ffi.Pointer<__off64_t> __pos, ffi.Int __w)>;
typedef cookie_close_function_t
    = ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void> __cookie)>;
typedef FILE = _IO_FILE;
typedef cookie_io_functions_t = _IO_cookie_io_functions_t;

final class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef fpos_t = __fpos_t;
typedef __fpos_t = _G_fpos_t;

final class max_align_t extends ffi.Opaque {}

final class timespec extends ffi.Struct {
  @__time_t()
  external int tv_sec;

  @__syscall_slong_t()
  external int tv_nsec;
}

typedef __time_t = ffi.Long;
typedef Dart__time_t = int;
typedef __syscall_slong_t = ffi.Long;
typedef Dart__syscall_slong_t = int;

final class sched_param extends ffi.Struct {
  @ffi.Int()
  external int sched_priority;
}

final class cpu_set_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<__cpu_mask> __bits;
}

typedef __cpu_mask = ffi.UnsignedLong;
typedef Dart__cpu_mask = int;
typedef __pid_t = ffi.Int;
typedef Dart__pid_t = int;

final class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;

  @ffi.Long()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Char> tm_zone;
}

final class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

final class sigevent extends ffi.Opaque {}

final class __locale_struct extends ffi.Struct {
  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<__locale_data>> __locales;

  external ffi.Pointer<ffi.UnsignedShort> __ctype_b;

  external ffi.Pointer<ffi.Int> __ctype_tolower;

  external ffi.Pointer<ffi.Int> __ctype_toupper;

  @ffi.Array.multi([13])
  external ffi.Array<ffi.Pointer<ffi.Char>> __names;
}

final class __locale_data extends ffi.Opaque {}

typedef clock_t = __clock_t;
typedef __clock_t = ffi.Long;
typedef Dart__clock_t = int;
typedef time_t = __time_t;
typedef locale_t = __locale_t;
typedef __locale_t = ffi.Pointer<__locale_struct>;
typedef clockid_t = __clockid_t;
typedef __clockid_t = ffi.Int;
typedef Dart__clockid_t = int;
typedef pid_t = __pid_t;
typedef timer_t = __timer_t;
typedef __timer_t = ffi.Pointer<ffi.Void>;

final class __atomic_wide_counter extends ffi.Union {
  @ffi.UnsignedLongLong()
  external int __value64;

  external UnnamedStruct1 __value32;
}

final class UnnamedStruct1 extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __low;

  @ffi.UnsignedInt()
  external int __high;
}

final class __pthread_internal_list extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_list> __prev;

  external ffi.Pointer<__pthread_internal_list> __next;
}

final class __pthread_internal_slist extends ffi.Struct {
  external ffi.Pointer<__pthread_internal_slist> __next;
}

final class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int()
  external int __lock;

  @ffi.UnsignedInt()
  external int __count;

  @ffi.Int()
  external int __owner;

  @ffi.UnsignedInt()
  external int __nusers;

  @ffi.Int()
  external int __kind;

  @ffi.Short()
  external int __spins;

  @ffi.Short()
  external int __elision;

  external __pthread_list_t __list;
}

typedef __pthread_list_t = __pthread_internal_list;

final class __pthread_rwlock_arch_t extends ffi.Struct {
  @ffi.UnsignedInt()
  external int __readers;

  @ffi.UnsignedInt()
  external int __writers;

  @ffi.UnsignedInt()
  external int __wrphase_futex;

  @ffi.UnsignedInt()
  external int __writers_futex;

  @ffi.UnsignedInt()
  external int __pad3;

  @ffi.UnsignedInt()
  external int __pad4;

  @ffi.Int()
  external int __cur_writer;

  @ffi.Int()
  external int __shared;

  @ffi.SignedChar()
  external int __rwelision;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.UnsignedChar> __pad1;

  @ffi.UnsignedLong()
  external int __pad2;

  @ffi.UnsignedInt()
  external int __flags;
}

final class __pthread_cond_s extends ffi.Struct {
  external __atomic_wide_counter __wseq;

  external __atomic_wide_counter __g1_start;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_refs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_size;

  @ffi.UnsignedInt()
  external int __g1_orig_size;

  @ffi.UnsignedInt()
  external int __wrefs;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedInt> __g_signals;
}

final class __once_flag extends ffi.Struct {
  @ffi.Int()
  external int __data;
}

final class pthread_mutexattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_condattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class pthread_attr_t extends ffi.Union {
  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_mutex_t extends ffi.Union {
  external __pthread_mutex_s __data;

  @ffi.Array.multi([40])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_cond_t extends ffi.Union {
  external __pthread_cond_s __data;

  @ffi.Array.multi([48])
  external ffi.Array<ffi.Char> __size;

  @ffi.LongLong()
  external int __align;
}

final class pthread_rwlock_t extends ffi.Union {
  external __pthread_rwlock_arch_t __data;

  @ffi.Array.multi([56])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_rwlockattr_t extends ffi.Union {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrier_t extends ffi.Union {
  @ffi.Array.multi([32])
  external ffi.Array<ffi.Char> __size;

  @ffi.Long()
  external int __align;
}

final class pthread_barrierattr_t extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Char> __size;

  @ffi.Int()
  external int __align;
}

final class __sigset_t extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedLong> __val;
}

final class __jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __jmpbuf;

  @ffi.Int()
  external int __mask_was_saved;

  external __sigset_t __saved_mask;
}

final class _pthread_cleanup_buffer extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __routine;

  external ffi.Pointer<ffi.Void> __arg;

  @ffi.Int()
  external int __canceltype;

  external ffi.Pointer<_pthread_cleanup_buffer> __prev;
}

typedef pthread_t = ffi.UnsignedLong;
typedef Dartpthread_t = int;
typedef pthread_once_t = ffi.Int;
typedef Dartpthread_once_t = int;

final class __cancel_jmp_buf_tag extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Long> __cancel_jmp_buf;

  @ffi.Int()
  external int __mask_was_saved;
}

final class __pthread_unwind_buf_t extends ffi.Struct {
  @ffi.Array.multi([1])
  external ffi.Array<__cancel_jmp_buf_tag> __cancel_jmp_buf;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Pointer<ffi.Void>> __pad;
}

final class __pthread_cleanup_frame extends ffi.Struct {
  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      __cancel_routine;

  external ffi.Pointer<ffi.Void> __cancel_arg;

  @ffi.Int()
  external int __do_it;

  @ffi.Int()
  external int __cancel_type;
}

typedef pthread_key_t = ffi.UnsignedInt;
typedef Dartpthread_key_t = int;

abstract class SPDPunctuation {
  static const int SPD_PUNCT_ALL = 0;
  static const int SPD_PUNCT_NONE = 1;
  static const int SPD_PUNCT_SOME = 2;
  static const int SPD_PUNCT_MOST = 3;
}

abstract class SPDCapitalLetters {
  static const int SPD_CAP_NONE = 0;
  static const int SPD_CAP_SPELL = 1;
  static const int SPD_CAP_ICON = 2;
}

abstract class SPDSpelling {
  static const int SPD_SPELL_OFF = 0;
  static const int SPD_SPELL_ON = 1;
}

abstract class SPDVoiceType {
  static const int SPD_MALE1 = 1;
  static const int SPD_MALE2 = 2;
  static const int SPD_MALE3 = 3;
  static const int SPD_FEMALE1 = 4;
  static const int SPD_FEMALE2 = 5;
  static const int SPD_FEMALE3 = 6;
  static const int SPD_CHILD_MALE = 7;
  static const int SPD_CHILD_FEMALE = 8;
  static const int SPD_UNSPECIFIED = -1;
}

final class SPDVoice extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> language;

  external ffi.Pointer<ffi.Char> variant;
}

abstract class SPDDataMode {
  static const int SPD_DATA_TEXT = 0;
  static const int SPD_DATA_SSML = 1;
}

abstract class SPDPriority {
  static const int SPD_IMPORTANT = 1;
  static const int SPD_MESSAGE = 2;
  static const int SPD_TEXT = 3;
  static const int SPD_NOTIFICATION = 4;
  static const int SPD_PROGRESS = 5;
}

abstract class SPDNotification {
  static const int SPD_BEGIN = 1;
  static const int SPD_END = 2;
  static const int SPD_INDEX_MARKS = 4;
  static const int SPD_CANCEL = 8;
  static const int SPD_PAUSE = 16;
  static const int SPD_RESUME = 32;
  static const int SPD_ALL = 63;
}

abstract class SPDNotificationType {
  static const int SPD_EVENT_BEGIN = 0;
  static const int SPD_EVENT_END = 1;
  static const int SPD_EVENT_INDEX_MARK = 2;
  static const int SPD_EVENT_CANCEL = 3;
  static const int SPD_EVENT_PAUSE = 4;
  static const int SPD_EVENT_RESUME = 5;
}

abstract class ESort {
  static const int SORT_BY_TIME = 0;
  static const int SORT_BY_ALPHABET = 1;
}

abstract class SPDMessageType {
  static const int SPD_MSGTYPE_TEXT = 0;
  static const int SPD_MSGTYPE_SOUND_ICON = 1;
  static const int SPD_MSGTYPE_CHAR = 2;
  static const int SPD_MSGTYPE_KEY = 3;
  static const int SPD_MSGTYPE_SPELL = 99;
}

final class SPDMsgSettings extends ffi.Struct {
  @ffi.Int()
  external int rate;

  @ffi.Int()
  external int pitch;

  @ffi.Int()
  external int pitch_range;

  @ffi.Int()
  external int volume;

  @ffi.Int32()
  external int punctuation_mode;

  @ffi.Int32()
  external int spelling_mode;

  @ffi.Int32()
  external int cap_let_recogn;

  @ffi.Int32()
  external int voice_type;

  external SPDVoice voice;
}

abstract class SPDConnectionMode {
  static const int SPD_MODE_SINGLE = 0;
  static const int SPD_MODE_THREADED = 1;
}

abstract class SPDConnectionMethod {
  static const int SPD_METHOD_UNIX_SOCKET = 0;
  static const int SPD_METHOD_INET_SOCKET = 1;
}

final class SPDConnectionAddress extends ffi.Struct {
  @ffi.Int32()
  external int method;

  external ffi.Pointer<ffi.Char> unix_socket_name;

  external ffi.Pointer<ffi.Char> inet_socket_host;

  @ffi.Int()
  external int inet_socket_port;

  external ffi.Pointer<ffi.Char> dbus_bus;
}

final class SPDConnection extends ffi.Struct {
  external SPDCallback callback_begin;

  external SPDCallback callback_end;

  external SPDCallback callback_cancel;

  external SPDCallback callback_pause;

  external SPDCallback callback_resume;

  external SPDCallbackIM callback_im;

  @ffi.Int()
  external int socket;

  external ffi.Pointer<FILE> stream;

  @ffi.Int32()
  external int mode;

  external pthread_mutex_t ssip_mutex;

  external ffi.Pointer<SPDConnection_threaddata> td;

  external ffi.Pointer<ffi.Char> reply;
}

typedef SPDCallback = ffi.Pointer<ffi.NativeFunction<SPDCallbackFunction>>;
typedef SPDCallbackFunction = ffi.Void Function(
    ffi.Size msg_id, ffi.Size client_id, ffi.Int32 state);
typedef DartSPDCallbackFunction = void Function(
    int msg_id, int client_id, int state);
typedef SPDCallbackIM = ffi.Pointer<ffi.NativeFunction<SPDCallbackIMFunction>>;
typedef SPDCallbackIMFunction = ffi.Void Function(ffi.Size msg_id,
    ffi.Size client_id, ffi.Int32 state, ffi.Pointer<ffi.Char> index_mark);
typedef DartSPDCallbackIMFunction = void Function(
    int msg_id, int client_id, int state, ffi.Pointer<ffi.Char> index_mark);

final class SPDConnection_threaddata extends ffi.Opaque {}

const int PTHREAD_CREATE_JOINABLE = 0;

const int PTHREAD_CREATE_DETACHED = 1;

const int PTHREAD_MUTEX_TIMED_NP = 0;

const int PTHREAD_MUTEX_RECURSIVE_NP = 1;

const int PTHREAD_MUTEX_ERRORCHECK_NP = 2;

const int PTHREAD_MUTEX_ADAPTIVE_NP = 3;

const int PTHREAD_MUTEX_NORMAL = 0;

const int PTHREAD_MUTEX_RECURSIVE = 1;

const int PTHREAD_MUTEX_ERRORCHECK = 2;

const int PTHREAD_MUTEX_DEFAULT = 0;

const int PTHREAD_MUTEX_STALLED = 0;

const int PTHREAD_MUTEX_STALLED_NP = 0;

const int PTHREAD_MUTEX_ROBUST = 1;

const int PTHREAD_MUTEX_ROBUST_NP = 1;

const int PTHREAD_PRIO_NONE = 0;

const int PTHREAD_PRIO_INHERIT = 1;

const int PTHREAD_PRIO_PROTECT = 2;

const int PTHREAD_RWLOCK_PREFER_READER_NP = 0;

const int PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;

const int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;

const int PTHREAD_RWLOCK_DEFAULT_NP = 0;

const int PTHREAD_INHERIT_SCHED = 0;

const int PTHREAD_EXPLICIT_SCHED = 1;

const int PTHREAD_SCOPE_SYSTEM = 0;

const int PTHREAD_SCOPE_PROCESS = 1;

const int PTHREAD_PROCESS_PRIVATE = 0;

const int PTHREAD_PROCESS_SHARED = 1;

const int PTHREAD_CANCEL_ENABLE = 0;

const int PTHREAD_CANCEL_DISABLE = 1;

const int PTHREAD_CANCEL_DEFERRED = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS = 1;

const int _STDIO_H = 1;

const int _FEATURES_H = 1;

const int _DEFAULT_SOURCE = 1;

const int __GLIBC_USE_ISOC2X = 1;

const int __USE_ISOC11 = 1;

const int __USE_ISOC99 = 1;

const int __USE_ISOC95 = 1;

const int _POSIX_SOURCE = 1;

const int _POSIX_C_SOURCE = 200809;

const int __USE_POSIX = 1;

const int __USE_POSIX2 = 1;

const int __USE_POSIX199309 = 1;

const int __USE_POSIX199506 = 1;

const int __USE_XOPEN2K = 1;

const int __USE_XOPEN2K8 = 1;

const int _ATFILE_SOURCE = 1;

const int __WORDSIZE = 64;

const int __WORDSIZE_TIME64_COMPAT32 = 1;

const int __SYSCALL_WORDSIZE = 64;

const int __TIMESIZE = 64;

const int __USE_MISC = 1;

const int __USE_ATFILE = 1;

const int __USE_FORTIFY_LEVEL = 0;

const int __GLIBC_USE_DEPRECATED_GETS = 0;

const int __GLIBC_USE_DEPRECATED_SCANF = 0;

const int __GLIBC_USE_C2X_STRTOL = 1;

const int _STDC_PREDEF_H = 1;

const int __STDC_IEC_559__ = 1;

const int __STDC_IEC_60559_BFP__ = 201404;

const int __STDC_IEC_559_COMPLEX__ = 1;

const int __STDC_IEC_60559_COMPLEX__ = 201404;

const int __STDC_ISO_10646__ = 201706;

const int __GNU_LIBRARY__ = 6;

const int __GLIBC__ = 2;

const int __GLIBC_MINOR__ = 39;

const int _SYS_CDEFS_H = 1;

const int __THROW = 1;

const int __THROWNL = 1;

const int __glibc_c99_flexarr_available = 1;

const int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI = 0;

const int __HAVE_GENERIC_SELECTION = 0;

const int __GLIBC_USE_LIB_EXT2 = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT = 1;

const int __GLIBC_USE_IEC_60559_BFP_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT = 1;

const int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X = 1;

const int __GLIBC_USE_IEC_60559_TYPES_EXT = 1;

const int NULL = 0;

const int _BITS_TYPES_H = 1;

const int _BITS_TYPESIZES_H = 1;

const int __OFF_T_MATCHES_OFF64_T = 1;

const int __INO_T_MATCHES_INO64_T = 1;

const int __RLIM_T_MATCHES_RLIM64_T = 1;

const int __STATFS_MATCHES_STATFS64 = 1;

const int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 = 1;

const int __FD_SETSIZE = 1024;

const int _BITS_TIME64_H = 1;

const int _____fpos_t_defined = 1;

const int ____mbstate_t_defined = 1;

const int _____fpos64_t_defined = 1;

const int ____FILE_defined = 1;

const int __FILE_defined = 1;

const int __struct_FILE_defined = 1;

const int _IO_EOF_SEEN = 16;

const int _IO_ERR_SEEN = 32;

const int _IO_USER_LOCK = 32768;

const int __cookie_io_functions_t_defined = 1;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 8192;

const int EOF = -1;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const String P_tmpdir = '/tmp';

const int L_tmpnam = 20;

const int TMP_MAX = 238328;

const int _BITS_STDIO_LIM_H = 1;

const int FILENAME_MAX = 4096;

const int L_ctermid = 9;

const int FOPEN_MAX = 16;

const int __HAVE_FLOAT128 = 0;

const int __HAVE_DISTINCT_FLOAT128 = 0;

const int __HAVE_FLOAT64X = 1;

const int __HAVE_FLOAT64X_LONG_DOUBLE = 1;

const int __HAVE_FLOAT16 = 0;

const int __HAVE_FLOAT32 = 1;

const int __HAVE_FLOAT64 = 1;

const int __HAVE_FLOAT32X = 1;

const int __HAVE_FLOAT128X = 0;

const int __HAVE_DISTINCT_FLOAT16 = 0;

const int __HAVE_DISTINCT_FLOAT32 = 0;

const int __HAVE_DISTINCT_FLOAT64 = 0;

const int __HAVE_DISTINCT_FLOAT32X = 0;

const int __HAVE_DISTINCT_FLOAT64X = 0;

const int __HAVE_DISTINCT_FLOAT128X = 0;

const int __HAVE_FLOAT128_UNLIKE_LDBL = 0;

const int __HAVE_FLOATN_NOT_TYPEDEF = 0;

const int _PTHREAD_H = 1;

const int _SCHED_H = 1;

const int __time_t_defined = 1;

const int _STRUCT_TIMESPEC = 1;

const int _BITS_ENDIAN_H = 1;

const int __LITTLE_ENDIAN = 1234;

const int __BIG_ENDIAN = 4321;

const int __PDP_ENDIAN = 3412;

const int _BITS_ENDIANNESS_H = 1;

const int __BYTE_ORDER = 1234;

const int __FLOAT_WORD_ORDER = 1234;

const int _BITS_SCHED_H = 1;

const int SCHED_OTHER = 0;

const int SCHED_FIFO = 1;

const int SCHED_RR = 2;

const int _BITS_TYPES_STRUCT_SCHED_PARAM = 1;

const int _BITS_CPU_SET_H = 1;

const int __CPU_SETSIZE = 1024;

const int __NCPUBITS = 64;

const int _TIME_H = 1;

const int _BITS_TIME_H = 1;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 1;

const int CLOCK_PROCESS_CPUTIME_ID = 2;

const int CLOCK_THREAD_CPUTIME_ID = 3;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_REALTIME_COARSE = 5;

const int CLOCK_MONOTONIC_COARSE = 6;

const int CLOCK_BOOTTIME = 7;

const int CLOCK_REALTIME_ALARM = 8;

const int CLOCK_BOOTTIME_ALARM = 9;

const int CLOCK_TAI = 11;

const int TIMER_ABSTIME = 1;

const int __clock_t_defined = 1;

const int __struct_tm_defined = 1;

const int __clockid_t_defined = 1;

const int __timer_t_defined = 1;

const int __itimerspec_defined = 1;

const int _BITS_TYPES_LOCALE_T_H = 1;

const int _BITS_TYPES___LOCALE_T_H = 1;

const int TIME_UTC = 1;

const int _BITS_PTHREADTYPES_COMMON_H = 1;

const int _THREAD_SHARED_TYPES_H = 1;

const int _BITS_PTHREADTYPES_ARCH_H = 1;

const int __SIZEOF_PTHREAD_MUTEX_T = 40;

const int __SIZEOF_PTHREAD_ATTR_T = 56;

const int __SIZEOF_PTHREAD_RWLOCK_T = 56;

const int __SIZEOF_PTHREAD_BARRIER_T = 32;

const int __SIZEOF_PTHREAD_MUTEXATTR_T = 4;

const int __SIZEOF_PTHREAD_COND_T = 48;

const int __SIZEOF_PTHREAD_CONDATTR_T = 4;

const int __SIZEOF_PTHREAD_RWLOCKATTR_T = 8;

const int __SIZEOF_PTHREAD_BARRIERATTR_T = 4;

const int _THREAD_MUTEX_INTERNAL_H = 1;

const int __PTHREAD_MUTEX_HAVE_PREV = 1;

const int __PTHREAD_RWLOCK_ELISION_EXTRA = 0;

const int __have_pthread_attr_t = 1;

const int _BITS_SETJMP_H = 1;

const int _SIGSET_NWORDS = 16;

const int __jmp_buf_tag_defined = 1;

const int PTHREAD_CREATE_JOINABLE1 = 0;

const int PTHREAD_CREATE_DETACHED1 = 1;

const int PTHREAD_INHERIT_SCHED1 = 0;

const int PTHREAD_EXPLICIT_SCHED1 = 1;

const int PTHREAD_SCOPE_SYSTEM1 = 0;

const int PTHREAD_SCOPE_PROCESS1 = 1;

const int PTHREAD_PROCESS_PRIVATE1 = 0;

const int PTHREAD_PROCESS_SHARED1 = 1;

const int PTHREAD_CANCEL_ENABLE1 = 0;

const int PTHREAD_CANCEL_DISABLE1 = 1;

const int PTHREAD_CANCEL_DEFERRED1 = 0;

const int PTHREAD_CANCEL_ASYNCHRONOUS1 = 1;

const int PTHREAD_ONCE_INIT = 0;

const int PTHREAD_BARRIER_SERIAL_THREAD = -1;

const int LIBSPEECHD_MAJOR_VERSION = 0;

const int LIBSPEECHD_MINOR_VERSION = 11;

const int LIBSPEECHD_MICRO_VERSION = 5;

const int SPEECHD_DEFAULT_PORT = 6560;

const int SPD_WAIT_REPLY = 1;

const int SPD_NO_REPLY = 0;
